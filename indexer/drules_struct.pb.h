// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: drules_struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_drules_5fstruct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_drules_5fstruct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_drules_5fstruct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_drules_5fstruct_2eproto {
  static const uint32_t offsets[];
};
class AreaRuleProto;
struct AreaRuleProtoDefaultTypeInternal;
extern AreaRuleProtoDefaultTypeInternal _AreaRuleProto_default_instance_;
class CaptionDefProto;
struct CaptionDefProtoDefaultTypeInternal;
extern CaptionDefProtoDefaultTypeInternal _CaptionDefProto_default_instance_;
class CaptionRuleProto;
struct CaptionRuleProtoDefaultTypeInternal;
extern CaptionRuleProtoDefaultTypeInternal _CaptionRuleProto_default_instance_;
class CircleRuleProto;
struct CircleRuleProtoDefaultTypeInternal;
extern CircleRuleProtoDefaultTypeInternal _CircleRuleProto_default_instance_;
class ClassifElementProto;
struct ClassifElementProtoDefaultTypeInternal;
extern ClassifElementProtoDefaultTypeInternal _ClassifElementProto_default_instance_;
class ColorElementProto;
struct ColorElementProtoDefaultTypeInternal;
extern ColorElementProtoDefaultTypeInternal _ColorElementProto_default_instance_;
class ColorsElementProto;
struct ColorsElementProtoDefaultTypeInternal;
extern ColorsElementProtoDefaultTypeInternal _ColorsElementProto_default_instance_;
class ContainerProto;
struct ContainerProtoDefaultTypeInternal;
extern ContainerProtoDefaultTypeInternal _ContainerProto_default_instance_;
class DashDotProto;
struct DashDotProtoDefaultTypeInternal;
extern DashDotProtoDefaultTypeInternal _DashDotProto_default_instance_;
class DrawElementProto;
struct DrawElementProtoDefaultTypeInternal;
extern DrawElementProtoDefaultTypeInternal _DrawElementProto_default_instance_;
class LineDefProto;
struct LineDefProtoDefaultTypeInternal;
extern LineDefProtoDefaultTypeInternal _LineDefProto_default_instance_;
class LineRuleProto;
struct LineRuleProtoDefaultTypeInternal;
extern LineRuleProtoDefaultTypeInternal _LineRuleProto_default_instance_;
class PathSymProto;
struct PathSymProtoDefaultTypeInternal;
extern PathSymProtoDefaultTypeInternal _PathSymProto_default_instance_;
class PathTextRuleProto;
struct PathTextRuleProtoDefaultTypeInternal;
extern PathTextRuleProtoDefaultTypeInternal _PathTextRuleProto_default_instance_;
class ShieldRuleProto;
struct ShieldRuleProtoDefaultTypeInternal;
extern ShieldRuleProtoDefaultTypeInternal _ShieldRuleProto_default_instance_;
class SymbolRuleProto;
struct SymbolRuleProtoDefaultTypeInternal;
extern SymbolRuleProtoDefaultTypeInternal _SymbolRuleProto_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AreaRuleProto* Arena::CreateMaybeMessage<::AreaRuleProto>(Arena*);
template<> ::CaptionDefProto* Arena::CreateMaybeMessage<::CaptionDefProto>(Arena*);
template<> ::CaptionRuleProto* Arena::CreateMaybeMessage<::CaptionRuleProto>(Arena*);
template<> ::CircleRuleProto* Arena::CreateMaybeMessage<::CircleRuleProto>(Arena*);
template<> ::ClassifElementProto* Arena::CreateMaybeMessage<::ClassifElementProto>(Arena*);
template<> ::ColorElementProto* Arena::CreateMaybeMessage<::ColorElementProto>(Arena*);
template<> ::ColorsElementProto* Arena::CreateMaybeMessage<::ColorsElementProto>(Arena*);
template<> ::ContainerProto* Arena::CreateMaybeMessage<::ContainerProto>(Arena*);
template<> ::DashDotProto* Arena::CreateMaybeMessage<::DashDotProto>(Arena*);
template<> ::DrawElementProto* Arena::CreateMaybeMessage<::DrawElementProto>(Arena*);
template<> ::LineDefProto* Arena::CreateMaybeMessage<::LineDefProto>(Arena*);
template<> ::LineRuleProto* Arena::CreateMaybeMessage<::LineRuleProto>(Arena*);
template<> ::PathSymProto* Arena::CreateMaybeMessage<::PathSymProto>(Arena*);
template<> ::PathTextRuleProto* Arena::CreateMaybeMessage<::PathTextRuleProto>(Arena*);
template<> ::ShieldRuleProto* Arena::CreateMaybeMessage<::ShieldRuleProto>(Arena*);
template<> ::SymbolRuleProto* Arena::CreateMaybeMessage<::SymbolRuleProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum LineJoin : int {
  ROUNDJOIN = 0,
  BEVELJOIN = 1,
  NOJOIN = 2,
  LineJoin_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LineJoin_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LineJoin_IsValid(int value);
constexpr LineJoin LineJoin_MIN = ROUNDJOIN;
constexpr LineJoin LineJoin_MAX = NOJOIN;
constexpr int LineJoin_ARRAYSIZE = LineJoin_MAX + 1;

const std::string& LineJoin_Name(LineJoin value);
template<typename T>
inline const std::string& LineJoin_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LineJoin>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LineJoin_Name.");
  return LineJoin_Name(static_cast<LineJoin>(enum_t_value));
}
bool LineJoin_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LineJoin* value);
enum LineCap : int {
  ROUNDCAP = 0,
  BUTTCAP = 1,
  SQUARECAP = 2,
  LineCap_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LineCap_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LineCap_IsValid(int value);
constexpr LineCap LineCap_MIN = ROUNDCAP;
constexpr LineCap LineCap_MAX = SQUARECAP;
constexpr int LineCap_ARRAYSIZE = LineCap_MAX + 1;

const std::string& LineCap_Name(LineCap value);
template<typename T>
inline const std::string& LineCap_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LineCap>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LineCap_Name.");
  return LineCap_Name(static_cast<LineCap>(enum_t_value));
}
bool LineCap_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LineCap* value);
// ===================================================================

class DashDotProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DashDotProto) */ {
 public:
  inline DashDotProto() : DashDotProto(nullptr) {}
  ~DashDotProto() override;
  explicit PROTOBUF_CONSTEXPR DashDotProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DashDotProto(const DashDotProto& from);
  DashDotProto(DashDotProto&& from) noexcept
    : DashDotProto() {
    *this = ::std::move(from);
  }

  inline DashDotProto& operator=(const DashDotProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DashDotProto& operator=(DashDotProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DashDotProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const DashDotProto* internal_default_instance() {
    return reinterpret_cast<const DashDotProto*>(
               &_DashDotProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DashDotProto& a, DashDotProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DashDotProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DashDotProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DashDotProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DashDotProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DashDotProto& from);
  void MergeFrom(const DashDotProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DashDotProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DashDotProto";
  }
  protected:
  explicit DashDotProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDdFieldNumber = 1,
    kOffsetFieldNumber = 2,
  };
  // repeated double dd = 1;
  int dd_size() const;
  private:
  int _internal_dd_size() const;
  public:
  void clear_dd();
  private:
  double _internal_dd(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_dd() const;
  void _internal_add_dd(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_dd();
  public:
  double dd(int index) const;
  void set_dd(int index, double value);
  void add_dd(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      dd() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_dd();

  // double offset = 2;
  void clear_offset();
  double offset() const;
  void set_offset(double value);
  private:
  double _internal_offset() const;
  void _internal_set_offset(double value);
  public:

  // @@protoc_insertion_point(class_scope:DashDotProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > dd_;
    double offset_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_drules_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class PathSymProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PathSymProto) */ {
 public:
  inline PathSymProto() : PathSymProto(nullptr) {}
  ~PathSymProto() override;
  explicit PROTOBUF_CONSTEXPR PathSymProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PathSymProto(const PathSymProto& from);
  PathSymProto(PathSymProto&& from) noexcept
    : PathSymProto() {
    *this = ::std::move(from);
  }

  inline PathSymProto& operator=(const PathSymProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathSymProto& operator=(PathSymProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PathSymProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const PathSymProto* internal_default_instance() {
    return reinterpret_cast<const PathSymProto*>(
               &_PathSymProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PathSymProto& a, PathSymProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PathSymProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PathSymProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PathSymProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PathSymProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PathSymProto& from);
  void MergeFrom(const PathSymProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PathSymProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PathSymProto";
  }
  protected:
  explicit PathSymProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStepFieldNumber = 2,
    kOffsetFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // double step = 2;
  void clear_step();
  double step() const;
  void set_step(double value);
  private:
  double _internal_step() const;
  void _internal_set_step(double value);
  public:

  // double offset = 3;
  void clear_offset();
  double offset() const;
  void set_offset(double value);
  private:
  double _internal_offset() const;
  void _internal_set_offset(double value);
  public:

  // @@protoc_insertion_point(class_scope:PathSymProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    double step_;
    double offset_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_drules_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class LineRuleProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:LineRuleProto) */ {
 public:
  inline LineRuleProto() : LineRuleProto(nullptr) {}
  ~LineRuleProto() override;
  explicit PROTOBUF_CONSTEXPR LineRuleProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LineRuleProto(const LineRuleProto& from);
  LineRuleProto(LineRuleProto&& from) noexcept
    : LineRuleProto() {
    *this = ::std::move(from);
  }

  inline LineRuleProto& operator=(const LineRuleProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LineRuleProto& operator=(LineRuleProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LineRuleProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const LineRuleProto* internal_default_instance() {
    return reinterpret_cast<const LineRuleProto*>(
               &_LineRuleProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LineRuleProto& a, LineRuleProto& b) {
    a.Swap(&b);
  }
  inline void Swap(LineRuleProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LineRuleProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LineRuleProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LineRuleProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LineRuleProto& from);
  void MergeFrom(const LineRuleProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LineRuleProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LineRuleProto";
  }
  protected:
  explicit LineRuleProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDashdotFieldNumber = 3,
    kPathsymFieldNumber = 5,
    kWidthFieldNumber = 1,
    kColorFieldNumber = 2,
    kPriorityFieldNumber = 4,
    kJoinFieldNumber = 6,
    kCapFieldNumber = 7,
  };
  // .DashDotProto dashdot = 3;
  bool has_dashdot() const;
  private:
  bool _internal_has_dashdot() const;
  public:
  void clear_dashdot();
  const ::DashDotProto& dashdot() const;
  PROTOBUF_NODISCARD ::DashDotProto* release_dashdot();
  ::DashDotProto* mutable_dashdot();
  void set_allocated_dashdot(::DashDotProto* dashdot);
  private:
  const ::DashDotProto& _internal_dashdot() const;
  ::DashDotProto* _internal_mutable_dashdot();
  public:
  void unsafe_arena_set_allocated_dashdot(
      ::DashDotProto* dashdot);
  ::DashDotProto* unsafe_arena_release_dashdot();

  // .PathSymProto pathsym = 5;
  bool has_pathsym() const;
  private:
  bool _internal_has_pathsym() const;
  public:
  void clear_pathsym();
  const ::PathSymProto& pathsym() const;
  PROTOBUF_NODISCARD ::PathSymProto* release_pathsym();
  ::PathSymProto* mutable_pathsym();
  void set_allocated_pathsym(::PathSymProto* pathsym);
  private:
  const ::PathSymProto& _internal_pathsym() const;
  ::PathSymProto* _internal_mutable_pathsym();
  public:
  void unsafe_arena_set_allocated_pathsym(
      ::PathSymProto* pathsym);
  ::PathSymProto* unsafe_arena_release_pathsym();

  // double width = 1;
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // uint32 color = 2;
  void clear_color();
  uint32_t color() const;
  void set_color(uint32_t value);
  private:
  uint32_t _internal_color() const;
  void _internal_set_color(uint32_t value);
  public:

  // int32 priority = 4;
  void clear_priority();
  int32_t priority() const;
  void set_priority(int32_t value);
  private:
  int32_t _internal_priority() const;
  void _internal_set_priority(int32_t value);
  public:

  // .LineJoin join = 6;
  void clear_join();
  ::LineJoin join() const;
  void set_join(::LineJoin value);
  private:
  ::LineJoin _internal_join() const;
  void _internal_set_join(::LineJoin value);
  public:

  // .LineCap cap = 7;
  void clear_cap();
  ::LineCap cap() const;
  void set_cap(::LineCap value);
  private:
  ::LineCap _internal_cap() const;
  void _internal_set_cap(::LineCap value);
  public:

  // @@protoc_insertion_point(class_scope:LineRuleProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::DashDotProto* dashdot_;
    ::PathSymProto* pathsym_;
    double width_;
    uint32_t color_;
    int32_t priority_;
    int join_;
    int cap_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_drules_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class LineDefProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:LineDefProto) */ {
 public:
  inline LineDefProto() : LineDefProto(nullptr) {}
  ~LineDefProto() override;
  explicit PROTOBUF_CONSTEXPR LineDefProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LineDefProto(const LineDefProto& from);
  LineDefProto(LineDefProto&& from) noexcept
    : LineDefProto() {
    *this = ::std::move(from);
  }

  inline LineDefProto& operator=(const LineDefProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LineDefProto& operator=(LineDefProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LineDefProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const LineDefProto* internal_default_instance() {
    return reinterpret_cast<const LineDefProto*>(
               &_LineDefProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LineDefProto& a, LineDefProto& b) {
    a.Swap(&b);
  }
  inline void Swap(LineDefProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LineDefProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LineDefProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LineDefProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LineDefProto& from);
  void MergeFrom(const LineDefProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LineDefProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LineDefProto";
  }
  protected:
  explicit LineDefProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDashdotFieldNumber = 3,
    kPathsymFieldNumber = 4,
    kWidthFieldNumber = 1,
    kColorFieldNumber = 2,
    kJoinFieldNumber = 6,
    kCapFieldNumber = 7,
  };
  // .DashDotProto dashdot = 3;
  bool has_dashdot() const;
  private:
  bool _internal_has_dashdot() const;
  public:
  void clear_dashdot();
  const ::DashDotProto& dashdot() const;
  PROTOBUF_NODISCARD ::DashDotProto* release_dashdot();
  ::DashDotProto* mutable_dashdot();
  void set_allocated_dashdot(::DashDotProto* dashdot);
  private:
  const ::DashDotProto& _internal_dashdot() const;
  ::DashDotProto* _internal_mutable_dashdot();
  public:
  void unsafe_arena_set_allocated_dashdot(
      ::DashDotProto* dashdot);
  ::DashDotProto* unsafe_arena_release_dashdot();

  // .PathSymProto pathsym = 4;
  bool has_pathsym() const;
  private:
  bool _internal_has_pathsym() const;
  public:
  void clear_pathsym();
  const ::PathSymProto& pathsym() const;
  PROTOBUF_NODISCARD ::PathSymProto* release_pathsym();
  ::PathSymProto* mutable_pathsym();
  void set_allocated_pathsym(::PathSymProto* pathsym);
  private:
  const ::PathSymProto& _internal_pathsym() const;
  ::PathSymProto* _internal_mutable_pathsym();
  public:
  void unsafe_arena_set_allocated_pathsym(
      ::PathSymProto* pathsym);
  ::PathSymProto* unsafe_arena_release_pathsym();

  // double width = 1;
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // uint32 color = 2;
  void clear_color();
  uint32_t color() const;
  void set_color(uint32_t value);
  private:
  uint32_t _internal_color() const;
  void _internal_set_color(uint32_t value);
  public:

  // .LineJoin join = 6;
  void clear_join();
  ::LineJoin join() const;
  void set_join(::LineJoin value);
  private:
  ::LineJoin _internal_join() const;
  void _internal_set_join(::LineJoin value);
  public:

  // .LineCap cap = 7;
  void clear_cap();
  ::LineCap cap() const;
  void set_cap(::LineCap value);
  private:
  ::LineCap _internal_cap() const;
  void _internal_set_cap(::LineCap value);
  public:

  // @@protoc_insertion_point(class_scope:LineDefProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::DashDotProto* dashdot_;
    ::PathSymProto* pathsym_;
    double width_;
    uint32_t color_;
    int join_;
    int cap_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_drules_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class AreaRuleProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:AreaRuleProto) */ {
 public:
  inline AreaRuleProto() : AreaRuleProto(nullptr) {}
  ~AreaRuleProto() override;
  explicit PROTOBUF_CONSTEXPR AreaRuleProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AreaRuleProto(const AreaRuleProto& from);
  AreaRuleProto(AreaRuleProto&& from) noexcept
    : AreaRuleProto() {
    *this = ::std::move(from);
  }

  inline AreaRuleProto& operator=(const AreaRuleProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AreaRuleProto& operator=(AreaRuleProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const AreaRuleProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const AreaRuleProto* internal_default_instance() {
    return reinterpret_cast<const AreaRuleProto*>(
               &_AreaRuleProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AreaRuleProto& a, AreaRuleProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AreaRuleProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AreaRuleProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AreaRuleProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AreaRuleProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AreaRuleProto& from);
  void MergeFrom(const AreaRuleProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AreaRuleProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AreaRuleProto";
  }
  protected:
  explicit AreaRuleProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBorderFieldNumber = 2,
    kColorFieldNumber = 1,
    kPriorityFieldNumber = 3,
  };
  // .LineDefProto border = 2;
  bool has_border() const;
  private:
  bool _internal_has_border() const;
  public:
  void clear_border();
  const ::LineDefProto& border() const;
  PROTOBUF_NODISCARD ::LineDefProto* release_border();
  ::LineDefProto* mutable_border();
  void set_allocated_border(::LineDefProto* border);
  private:
  const ::LineDefProto& _internal_border() const;
  ::LineDefProto* _internal_mutable_border();
  public:
  void unsafe_arena_set_allocated_border(
      ::LineDefProto* border);
  ::LineDefProto* unsafe_arena_release_border();

  // uint32 color = 1;
  void clear_color();
  uint32_t color() const;
  void set_color(uint32_t value);
  private:
  uint32_t _internal_color() const;
  void _internal_set_color(uint32_t value);
  public:

  // int32 priority = 3;
  void clear_priority();
  int32_t priority() const;
  void set_priority(int32_t value);
  private:
  int32_t _internal_priority() const;
  void _internal_set_priority(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:AreaRuleProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::LineDefProto* border_;
    uint32_t color_;
    int32_t priority_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_drules_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class SymbolRuleProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:SymbolRuleProto) */ {
 public:
  inline SymbolRuleProto() : SymbolRuleProto(nullptr) {}
  ~SymbolRuleProto() override;
  explicit PROTOBUF_CONSTEXPR SymbolRuleProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SymbolRuleProto(const SymbolRuleProto& from);
  SymbolRuleProto(SymbolRuleProto&& from) noexcept
    : SymbolRuleProto() {
    *this = ::std::move(from);
  }

  inline SymbolRuleProto& operator=(const SymbolRuleProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SymbolRuleProto& operator=(SymbolRuleProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SymbolRuleProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const SymbolRuleProto* internal_default_instance() {
    return reinterpret_cast<const SymbolRuleProto*>(
               &_SymbolRuleProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SymbolRuleProto& a, SymbolRuleProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SymbolRuleProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SymbolRuleProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SymbolRuleProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SymbolRuleProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SymbolRuleProto& from);
  void MergeFrom(const SymbolRuleProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SymbolRuleProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SymbolRuleProto";
  }
  protected:
  explicit SymbolRuleProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kApplyForTypeFieldNumber = 2,
    kPriorityFieldNumber = 3,
    kMinDistanceFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 apply_for_type = 2;
  void clear_apply_for_type();
  int32_t apply_for_type() const;
  void set_apply_for_type(int32_t value);
  private:
  int32_t _internal_apply_for_type() const;
  void _internal_set_apply_for_type(int32_t value);
  public:

  // int32 priority = 3;
  void clear_priority();
  int32_t priority() const;
  void set_priority(int32_t value);
  private:
  int32_t _internal_priority() const;
  void _internal_set_priority(int32_t value);
  public:

  // int32 min_distance = 4;
  void clear_min_distance();
  int32_t min_distance() const;
  void set_min_distance(int32_t value);
  private:
  int32_t _internal_min_distance() const;
  void _internal_set_min_distance(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SymbolRuleProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t apply_for_type_;
    int32_t priority_;
    int32_t min_distance_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_drules_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class CaptionDefProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CaptionDefProto) */ {
 public:
  inline CaptionDefProto() : CaptionDefProto(nullptr) {}
  ~CaptionDefProto() override;
  explicit PROTOBUF_CONSTEXPR CaptionDefProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CaptionDefProto(const CaptionDefProto& from);
  CaptionDefProto(CaptionDefProto&& from) noexcept
    : CaptionDefProto() {
    *this = ::std::move(from);
  }

  inline CaptionDefProto& operator=(const CaptionDefProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CaptionDefProto& operator=(CaptionDefProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CaptionDefProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const CaptionDefProto* internal_default_instance() {
    return reinterpret_cast<const CaptionDefProto*>(
               &_CaptionDefProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CaptionDefProto& a, CaptionDefProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CaptionDefProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CaptionDefProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CaptionDefProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CaptionDefProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CaptionDefProto& from);
  void MergeFrom(const CaptionDefProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CaptionDefProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CaptionDefProto";
  }
  protected:
  explicit CaptionDefProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 6,
    kHeightFieldNumber = 1,
    kColorFieldNumber = 2,
    kStrokeColorFieldNumber = 3,
    kOffsetXFieldNumber = 4,
    kOffsetYFieldNumber = 5,
    kIsOptionalFieldNumber = 7,
  };
  // string text = 6;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // int32 height = 1;
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // uint32 color = 2;
  void clear_color();
  uint32_t color() const;
  void set_color(uint32_t value);
  private:
  uint32_t _internal_color() const;
  void _internal_set_color(uint32_t value);
  public:

  // uint32 stroke_color = 3;
  void clear_stroke_color();
  uint32_t stroke_color() const;
  void set_stroke_color(uint32_t value);
  private:
  uint32_t _internal_stroke_color() const;
  void _internal_set_stroke_color(uint32_t value);
  public:

  // int32 offset_x = 4;
  void clear_offset_x();
  int32_t offset_x() const;
  void set_offset_x(int32_t value);
  private:
  int32_t _internal_offset_x() const;
  void _internal_set_offset_x(int32_t value);
  public:

  // int32 offset_y = 5;
  void clear_offset_y();
  int32_t offset_y() const;
  void set_offset_y(int32_t value);
  private:
  int32_t _internal_offset_y() const;
  void _internal_set_offset_y(int32_t value);
  public:

  // bool is_optional = 7;
  void clear_is_optional();
  bool is_optional() const;
  void set_is_optional(bool value);
  private:
  bool _internal_is_optional() const;
  void _internal_set_is_optional(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CaptionDefProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    int32_t height_;
    uint32_t color_;
    uint32_t stroke_color_;
    int32_t offset_x_;
    int32_t offset_y_;
    bool is_optional_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_drules_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class CaptionRuleProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CaptionRuleProto) */ {
 public:
  inline CaptionRuleProto() : CaptionRuleProto(nullptr) {}
  ~CaptionRuleProto() override;
  explicit PROTOBUF_CONSTEXPR CaptionRuleProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CaptionRuleProto(const CaptionRuleProto& from);
  CaptionRuleProto(CaptionRuleProto&& from) noexcept
    : CaptionRuleProto() {
    *this = ::std::move(from);
  }

  inline CaptionRuleProto& operator=(const CaptionRuleProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CaptionRuleProto& operator=(CaptionRuleProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CaptionRuleProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const CaptionRuleProto* internal_default_instance() {
    return reinterpret_cast<const CaptionRuleProto*>(
               &_CaptionRuleProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CaptionRuleProto& a, CaptionRuleProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CaptionRuleProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CaptionRuleProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CaptionRuleProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CaptionRuleProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CaptionRuleProto& from);
  void MergeFrom(const CaptionRuleProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CaptionRuleProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CaptionRuleProto";
  }
  protected:
  explicit CaptionRuleProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrimaryFieldNumber = 1,
    kSecondaryFieldNumber = 2,
    kPriorityFieldNumber = 3,
  };
  // .CaptionDefProto primary = 1;
  bool has_primary() const;
  private:
  bool _internal_has_primary() const;
  public:
  void clear_primary();
  const ::CaptionDefProto& primary() const;
  PROTOBUF_NODISCARD ::CaptionDefProto* release_primary();
  ::CaptionDefProto* mutable_primary();
  void set_allocated_primary(::CaptionDefProto* primary);
  private:
  const ::CaptionDefProto& _internal_primary() const;
  ::CaptionDefProto* _internal_mutable_primary();
  public:
  void unsafe_arena_set_allocated_primary(
      ::CaptionDefProto* primary);
  ::CaptionDefProto* unsafe_arena_release_primary();

  // .CaptionDefProto secondary = 2;
  bool has_secondary() const;
  private:
  bool _internal_has_secondary() const;
  public:
  void clear_secondary();
  const ::CaptionDefProto& secondary() const;
  PROTOBUF_NODISCARD ::CaptionDefProto* release_secondary();
  ::CaptionDefProto* mutable_secondary();
  void set_allocated_secondary(::CaptionDefProto* secondary);
  private:
  const ::CaptionDefProto& _internal_secondary() const;
  ::CaptionDefProto* _internal_mutable_secondary();
  public:
  void unsafe_arena_set_allocated_secondary(
      ::CaptionDefProto* secondary);
  ::CaptionDefProto* unsafe_arena_release_secondary();

  // int32 priority = 3;
  void clear_priority();
  int32_t priority() const;
  void set_priority(int32_t value);
  private:
  int32_t _internal_priority() const;
  void _internal_set_priority(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CaptionRuleProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::CaptionDefProto* primary_;
    ::CaptionDefProto* secondary_;
    int32_t priority_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_drules_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class CircleRuleProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CircleRuleProto) */ {
 public:
  inline CircleRuleProto() : CircleRuleProto(nullptr) {}
  ~CircleRuleProto() override;
  explicit PROTOBUF_CONSTEXPR CircleRuleProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CircleRuleProto(const CircleRuleProto& from);
  CircleRuleProto(CircleRuleProto&& from) noexcept
    : CircleRuleProto() {
    *this = ::std::move(from);
  }

  inline CircleRuleProto& operator=(const CircleRuleProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CircleRuleProto& operator=(CircleRuleProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CircleRuleProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const CircleRuleProto* internal_default_instance() {
    return reinterpret_cast<const CircleRuleProto*>(
               &_CircleRuleProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CircleRuleProto& a, CircleRuleProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CircleRuleProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CircleRuleProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CircleRuleProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CircleRuleProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CircleRuleProto& from);
  void MergeFrom(const CircleRuleProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CircleRuleProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CircleRuleProto";
  }
  protected:
  explicit CircleRuleProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBorderFieldNumber = 3,
    kRadiusFieldNumber = 1,
    kColorFieldNumber = 2,
    kPriorityFieldNumber = 4,
  };
  // .LineDefProto border = 3;
  bool has_border() const;
  private:
  bool _internal_has_border() const;
  public:
  void clear_border();
  const ::LineDefProto& border() const;
  PROTOBUF_NODISCARD ::LineDefProto* release_border();
  ::LineDefProto* mutable_border();
  void set_allocated_border(::LineDefProto* border);
  private:
  const ::LineDefProto& _internal_border() const;
  ::LineDefProto* _internal_mutable_border();
  public:
  void unsafe_arena_set_allocated_border(
      ::LineDefProto* border);
  ::LineDefProto* unsafe_arena_release_border();

  // double radius = 1;
  void clear_radius();
  double radius() const;
  void set_radius(double value);
  private:
  double _internal_radius() const;
  void _internal_set_radius(double value);
  public:

  // uint32 color = 2;
  void clear_color();
  uint32_t color() const;
  void set_color(uint32_t value);
  private:
  uint32_t _internal_color() const;
  void _internal_set_color(uint32_t value);
  public:

  // int32 priority = 4;
  void clear_priority();
  int32_t priority() const;
  void set_priority(int32_t value);
  private:
  int32_t _internal_priority() const;
  void _internal_set_priority(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CircleRuleProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::LineDefProto* border_;
    double radius_;
    uint32_t color_;
    int32_t priority_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_drules_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class PathTextRuleProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PathTextRuleProto) */ {
 public:
  inline PathTextRuleProto() : PathTextRuleProto(nullptr) {}
  ~PathTextRuleProto() override;
  explicit PROTOBUF_CONSTEXPR PathTextRuleProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PathTextRuleProto(const PathTextRuleProto& from);
  PathTextRuleProto(PathTextRuleProto&& from) noexcept
    : PathTextRuleProto() {
    *this = ::std::move(from);
  }

  inline PathTextRuleProto& operator=(const PathTextRuleProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathTextRuleProto& operator=(PathTextRuleProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PathTextRuleProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const PathTextRuleProto* internal_default_instance() {
    return reinterpret_cast<const PathTextRuleProto*>(
               &_PathTextRuleProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PathTextRuleProto& a, PathTextRuleProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PathTextRuleProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PathTextRuleProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PathTextRuleProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PathTextRuleProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PathTextRuleProto& from);
  void MergeFrom(const PathTextRuleProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PathTextRuleProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PathTextRuleProto";
  }
  protected:
  explicit PathTextRuleProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrimaryFieldNumber = 1,
    kSecondaryFieldNumber = 2,
    kPriorityFieldNumber = 3,
  };
  // .CaptionDefProto primary = 1;
  bool has_primary() const;
  private:
  bool _internal_has_primary() const;
  public:
  void clear_primary();
  const ::CaptionDefProto& primary() const;
  PROTOBUF_NODISCARD ::CaptionDefProto* release_primary();
  ::CaptionDefProto* mutable_primary();
  void set_allocated_primary(::CaptionDefProto* primary);
  private:
  const ::CaptionDefProto& _internal_primary() const;
  ::CaptionDefProto* _internal_mutable_primary();
  public:
  void unsafe_arena_set_allocated_primary(
      ::CaptionDefProto* primary);
  ::CaptionDefProto* unsafe_arena_release_primary();

  // .CaptionDefProto secondary = 2;
  bool has_secondary() const;
  private:
  bool _internal_has_secondary() const;
  public:
  void clear_secondary();
  const ::CaptionDefProto& secondary() const;
  PROTOBUF_NODISCARD ::CaptionDefProto* release_secondary();
  ::CaptionDefProto* mutable_secondary();
  void set_allocated_secondary(::CaptionDefProto* secondary);
  private:
  const ::CaptionDefProto& _internal_secondary() const;
  ::CaptionDefProto* _internal_mutable_secondary();
  public:
  void unsafe_arena_set_allocated_secondary(
      ::CaptionDefProto* secondary);
  ::CaptionDefProto* unsafe_arena_release_secondary();

  // int32 priority = 3;
  void clear_priority();
  int32_t priority() const;
  void set_priority(int32_t value);
  private:
  int32_t _internal_priority() const;
  void _internal_set_priority(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PathTextRuleProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::CaptionDefProto* primary_;
    ::CaptionDefProto* secondary_;
    int32_t priority_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_drules_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class ShieldRuleProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ShieldRuleProto) */ {
 public:
  inline ShieldRuleProto() : ShieldRuleProto(nullptr) {}
  ~ShieldRuleProto() override;
  explicit PROTOBUF_CONSTEXPR ShieldRuleProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShieldRuleProto(const ShieldRuleProto& from);
  ShieldRuleProto(ShieldRuleProto&& from) noexcept
    : ShieldRuleProto() {
    *this = ::std::move(from);
  }

  inline ShieldRuleProto& operator=(const ShieldRuleProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShieldRuleProto& operator=(ShieldRuleProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ShieldRuleProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShieldRuleProto* internal_default_instance() {
    return reinterpret_cast<const ShieldRuleProto*>(
               &_ShieldRuleProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ShieldRuleProto& a, ShieldRuleProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ShieldRuleProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShieldRuleProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShieldRuleProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShieldRuleProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ShieldRuleProto& from);
  void MergeFrom(const ShieldRuleProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ShieldRuleProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShieldRuleProto";
  }
  protected:
  explicit ShieldRuleProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightFieldNumber = 1,
    kColorFieldNumber = 2,
    kStrokeColorFieldNumber = 3,
    kPriorityFieldNumber = 4,
    kMinDistanceFieldNumber = 5,
    kTextColorFieldNumber = 6,
    kTextStrokeColorFieldNumber = 7,
  };
  // int32 height = 1;
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // uint32 color = 2;
  void clear_color();
  uint32_t color() const;
  void set_color(uint32_t value);
  private:
  uint32_t _internal_color() const;
  void _internal_set_color(uint32_t value);
  public:

  // uint32 stroke_color = 3;
  void clear_stroke_color();
  uint32_t stroke_color() const;
  void set_stroke_color(uint32_t value);
  private:
  uint32_t _internal_stroke_color() const;
  void _internal_set_stroke_color(uint32_t value);
  public:

  // int32 priority = 4;
  void clear_priority();
  int32_t priority() const;
  void set_priority(int32_t value);
  private:
  int32_t _internal_priority() const;
  void _internal_set_priority(int32_t value);
  public:

  // int32 min_distance = 5;
  void clear_min_distance();
  int32_t min_distance() const;
  void set_min_distance(int32_t value);
  private:
  int32_t _internal_min_distance() const;
  void _internal_set_min_distance(int32_t value);
  public:

  // uint32 text_color = 6;
  void clear_text_color();
  uint32_t text_color() const;
  void set_text_color(uint32_t value);
  private:
  uint32_t _internal_text_color() const;
  void _internal_set_text_color(uint32_t value);
  public:

  // uint32 text_stroke_color = 7;
  void clear_text_stroke_color();
  uint32_t text_stroke_color() const;
  void set_text_stroke_color(uint32_t value);
  private:
  uint32_t _internal_text_stroke_color() const;
  void _internal_set_text_stroke_color(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ShieldRuleProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t height_;
    uint32_t color_;
    uint32_t stroke_color_;
    int32_t priority_;
    int32_t min_distance_;
    uint32_t text_color_;
    uint32_t text_stroke_color_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_drules_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class DrawElementProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DrawElementProto) */ {
 public:
  inline DrawElementProto() : DrawElementProto(nullptr) {}
  ~DrawElementProto() override;
  explicit PROTOBUF_CONSTEXPR DrawElementProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrawElementProto(const DrawElementProto& from);
  DrawElementProto(DrawElementProto&& from) noexcept
    : DrawElementProto() {
    *this = ::std::move(from);
  }

  inline DrawElementProto& operator=(const DrawElementProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawElementProto& operator=(DrawElementProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DrawElementProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrawElementProto* internal_default_instance() {
    return reinterpret_cast<const DrawElementProto*>(
               &_DrawElementProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DrawElementProto& a, DrawElementProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawElementProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawElementProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DrawElementProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DrawElementProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DrawElementProto& from);
  void MergeFrom(const DrawElementProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DrawElementProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DrawElementProto";
  }
  protected:
  explicit DrawElementProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinesFieldNumber = 2,
    kApplyIfFieldNumber = 9,
    kAreaFieldNumber = 3,
    kSymbolFieldNumber = 4,
    kCaptionFieldNumber = 5,
    kCircleFieldNumber = 6,
    kPathTextFieldNumber = 7,
    kShieldFieldNumber = 8,
    kScaleFieldNumber = 1,
  };
  // repeated .LineRuleProto lines = 2;
  int lines_size() const;
  private:
  int _internal_lines_size() const;
  public:
  void clear_lines();
  ::LineRuleProto* mutable_lines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LineRuleProto >*
      mutable_lines();
  private:
  const ::LineRuleProto& _internal_lines(int index) const;
  ::LineRuleProto* _internal_add_lines();
  public:
  const ::LineRuleProto& lines(int index) const;
  ::LineRuleProto* add_lines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LineRuleProto >&
      lines() const;

  // repeated string apply_if = 9;
  int apply_if_size() const;
  private:
  int _internal_apply_if_size() const;
  public:
  void clear_apply_if();
  const std::string& apply_if(int index) const;
  std::string* mutable_apply_if(int index);
  void set_apply_if(int index, const std::string& value);
  void set_apply_if(int index, std::string&& value);
  void set_apply_if(int index, const char* value);
  void set_apply_if(int index, const char* value, size_t size);
  std::string* add_apply_if();
  void add_apply_if(const std::string& value);
  void add_apply_if(std::string&& value);
  void add_apply_if(const char* value);
  void add_apply_if(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& apply_if() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_apply_if();
  private:
  const std::string& _internal_apply_if(int index) const;
  std::string* _internal_add_apply_if();
  public:

  // .AreaRuleProto area = 3;
  bool has_area() const;
  private:
  bool _internal_has_area() const;
  public:
  void clear_area();
  const ::AreaRuleProto& area() const;
  PROTOBUF_NODISCARD ::AreaRuleProto* release_area();
  ::AreaRuleProto* mutable_area();
  void set_allocated_area(::AreaRuleProto* area);
  private:
  const ::AreaRuleProto& _internal_area() const;
  ::AreaRuleProto* _internal_mutable_area();
  public:
  void unsafe_arena_set_allocated_area(
      ::AreaRuleProto* area);
  ::AreaRuleProto* unsafe_arena_release_area();

  // .SymbolRuleProto symbol = 4;
  bool has_symbol() const;
  private:
  bool _internal_has_symbol() const;
  public:
  void clear_symbol();
  const ::SymbolRuleProto& symbol() const;
  PROTOBUF_NODISCARD ::SymbolRuleProto* release_symbol();
  ::SymbolRuleProto* mutable_symbol();
  void set_allocated_symbol(::SymbolRuleProto* symbol);
  private:
  const ::SymbolRuleProto& _internal_symbol() const;
  ::SymbolRuleProto* _internal_mutable_symbol();
  public:
  void unsafe_arena_set_allocated_symbol(
      ::SymbolRuleProto* symbol);
  ::SymbolRuleProto* unsafe_arena_release_symbol();

  // .CaptionRuleProto caption = 5;
  bool has_caption() const;
  private:
  bool _internal_has_caption() const;
  public:
  void clear_caption();
  const ::CaptionRuleProto& caption() const;
  PROTOBUF_NODISCARD ::CaptionRuleProto* release_caption();
  ::CaptionRuleProto* mutable_caption();
  void set_allocated_caption(::CaptionRuleProto* caption);
  private:
  const ::CaptionRuleProto& _internal_caption() const;
  ::CaptionRuleProto* _internal_mutable_caption();
  public:
  void unsafe_arena_set_allocated_caption(
      ::CaptionRuleProto* caption);
  ::CaptionRuleProto* unsafe_arena_release_caption();

  // .CircleRuleProto circle = 6;
  bool has_circle() const;
  private:
  bool _internal_has_circle() const;
  public:
  void clear_circle();
  const ::CircleRuleProto& circle() const;
  PROTOBUF_NODISCARD ::CircleRuleProto* release_circle();
  ::CircleRuleProto* mutable_circle();
  void set_allocated_circle(::CircleRuleProto* circle);
  private:
  const ::CircleRuleProto& _internal_circle() const;
  ::CircleRuleProto* _internal_mutable_circle();
  public:
  void unsafe_arena_set_allocated_circle(
      ::CircleRuleProto* circle);
  ::CircleRuleProto* unsafe_arena_release_circle();

  // .PathTextRuleProto path_text = 7;
  bool has_path_text() const;
  private:
  bool _internal_has_path_text() const;
  public:
  void clear_path_text();
  const ::PathTextRuleProto& path_text() const;
  PROTOBUF_NODISCARD ::PathTextRuleProto* release_path_text();
  ::PathTextRuleProto* mutable_path_text();
  void set_allocated_path_text(::PathTextRuleProto* path_text);
  private:
  const ::PathTextRuleProto& _internal_path_text() const;
  ::PathTextRuleProto* _internal_mutable_path_text();
  public:
  void unsafe_arena_set_allocated_path_text(
      ::PathTextRuleProto* path_text);
  ::PathTextRuleProto* unsafe_arena_release_path_text();

  // .ShieldRuleProto shield = 8;
  bool has_shield() const;
  private:
  bool _internal_has_shield() const;
  public:
  void clear_shield();
  const ::ShieldRuleProto& shield() const;
  PROTOBUF_NODISCARD ::ShieldRuleProto* release_shield();
  ::ShieldRuleProto* mutable_shield();
  void set_allocated_shield(::ShieldRuleProto* shield);
  private:
  const ::ShieldRuleProto& _internal_shield() const;
  ::ShieldRuleProto* _internal_mutable_shield();
  public:
  void unsafe_arena_set_allocated_shield(
      ::ShieldRuleProto* shield);
  ::ShieldRuleProto* unsafe_arena_release_shield();

  // int32 scale = 1;
  void clear_scale();
  int32_t scale() const;
  void set_scale(int32_t value);
  private:
  int32_t _internal_scale() const;
  void _internal_set_scale(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DrawElementProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LineRuleProto > lines_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> apply_if_;
    ::AreaRuleProto* area_;
    ::SymbolRuleProto* symbol_;
    ::CaptionRuleProto* caption_;
    ::CircleRuleProto* circle_;
    ::PathTextRuleProto* path_text_;
    ::ShieldRuleProto* shield_;
    int32_t scale_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_drules_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class ClassifElementProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ClassifElementProto) */ {
 public:
  inline ClassifElementProto() : ClassifElementProto(nullptr) {}
  ~ClassifElementProto() override;
  explicit PROTOBUF_CONSTEXPR ClassifElementProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClassifElementProto(const ClassifElementProto& from);
  ClassifElementProto(ClassifElementProto&& from) noexcept
    : ClassifElementProto() {
    *this = ::std::move(from);
  }

  inline ClassifElementProto& operator=(const ClassifElementProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClassifElementProto& operator=(ClassifElementProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ClassifElementProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClassifElementProto* internal_default_instance() {
    return reinterpret_cast<const ClassifElementProto*>(
               &_ClassifElementProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ClassifElementProto& a, ClassifElementProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ClassifElementProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClassifElementProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClassifElementProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClassifElementProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClassifElementProto& from);
  void MergeFrom(const ClassifElementProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClassifElementProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClassifElementProto";
  }
  protected:
  explicit ClassifElementProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .DrawElementProto element = 2;
  int element_size() const;
  private:
  int _internal_element_size() const;
  public:
  void clear_element();
  ::DrawElementProto* mutable_element(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DrawElementProto >*
      mutable_element();
  private:
  const ::DrawElementProto& _internal_element(int index) const;
  ::DrawElementProto* _internal_add_element();
  public:
  const ::DrawElementProto& element(int index) const;
  ::DrawElementProto* add_element();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DrawElementProto >&
      element() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:ClassifElementProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DrawElementProto > element_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_drules_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class ColorElementProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ColorElementProto) */ {
 public:
  inline ColorElementProto() : ColorElementProto(nullptr) {}
  ~ColorElementProto() override;
  explicit PROTOBUF_CONSTEXPR ColorElementProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColorElementProto(const ColorElementProto& from);
  ColorElementProto(ColorElementProto&& from) noexcept
    : ColorElementProto() {
    *this = ::std::move(from);
  }

  inline ColorElementProto& operator=(const ColorElementProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorElementProto& operator=(ColorElementProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ColorElementProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColorElementProto* internal_default_instance() {
    return reinterpret_cast<const ColorElementProto*>(
               &_ColorElementProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ColorElementProto& a, ColorElementProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorElementProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorElementProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColorElementProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ColorElementProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ColorElementProto& from);
  void MergeFrom(const ColorElementProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ColorElementProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ColorElementProto";
  }
  protected:
  explicit ColorElementProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kColorFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 color = 2;
  void clear_color();
  uint32_t color() const;
  void set_color(uint32_t value);
  private:
  uint32_t _internal_color() const;
  void _internal_set_color(uint32_t value);
  public:

  // float x = 3;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 4;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:ColorElementProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t color_;
    float x_;
    float y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_drules_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class ColorsElementProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ColorsElementProto) */ {
 public:
  inline ColorsElementProto() : ColorsElementProto(nullptr) {}
  ~ColorsElementProto() override;
  explicit PROTOBUF_CONSTEXPR ColorsElementProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColorsElementProto(const ColorsElementProto& from);
  ColorsElementProto(ColorsElementProto&& from) noexcept
    : ColorsElementProto() {
    *this = ::std::move(from);
  }

  inline ColorsElementProto& operator=(const ColorsElementProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorsElementProto& operator=(ColorsElementProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ColorsElementProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColorsElementProto* internal_default_instance() {
    return reinterpret_cast<const ColorsElementProto*>(
               &_ColorsElementProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ColorsElementProto& a, ColorsElementProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorsElementProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorsElementProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColorsElementProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ColorsElementProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ColorsElementProto& from);
  void MergeFrom(const ColorsElementProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ColorsElementProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ColorsElementProto";
  }
  protected:
  explicit ColorsElementProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated .ColorElementProto value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  ::ColorElementProto* mutable_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ColorElementProto >*
      mutable_value();
  private:
  const ::ColorElementProto& _internal_value(int index) const;
  ::ColorElementProto* _internal_add_value();
  public:
  const ::ColorElementProto& value(int index) const;
  ::ColorElementProto* add_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ColorElementProto >&
      value() const;

  // @@protoc_insertion_point(class_scope:ColorsElementProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ColorElementProto > value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_drules_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class ContainerProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ContainerProto) */ {
 public:
  inline ContainerProto() : ContainerProto(nullptr) {}
  ~ContainerProto() override;
  explicit PROTOBUF_CONSTEXPR ContainerProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContainerProto(const ContainerProto& from);
  ContainerProto(ContainerProto&& from) noexcept
    : ContainerProto() {
    *this = ::std::move(from);
  }

  inline ContainerProto& operator=(const ContainerProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerProto& operator=(ContainerProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ContainerProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContainerProto* internal_default_instance() {
    return reinterpret_cast<const ContainerProto*>(
               &_ContainerProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ContainerProto& a, ContainerProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContainerProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContainerProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ContainerProto& from);
  void MergeFrom(const ContainerProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContainerProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ContainerProto";
  }
  protected:
  explicit ContainerProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContFieldNumber = 1,
    kColorsFieldNumber = 2,
  };
  // repeated .ClassifElementProto cont = 1;
  int cont_size() const;
  private:
  int _internal_cont_size() const;
  public:
  void clear_cont();
  ::ClassifElementProto* mutable_cont(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClassifElementProto >*
      mutable_cont();
  private:
  const ::ClassifElementProto& _internal_cont(int index) const;
  ::ClassifElementProto* _internal_add_cont();
  public:
  const ::ClassifElementProto& cont(int index) const;
  ::ClassifElementProto* add_cont();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClassifElementProto >&
      cont() const;

  // .ColorsElementProto colors = 2;
  bool has_colors() const;
  private:
  bool _internal_has_colors() const;
  public:
  void clear_colors();
  const ::ColorsElementProto& colors() const;
  PROTOBUF_NODISCARD ::ColorsElementProto* release_colors();
  ::ColorsElementProto* mutable_colors();
  void set_allocated_colors(::ColorsElementProto* colors);
  private:
  const ::ColorsElementProto& _internal_colors() const;
  ::ColorsElementProto* _internal_mutable_colors();
  public:
  void unsafe_arena_set_allocated_colors(
      ::ColorsElementProto* colors);
  ::ColorsElementProto* unsafe_arena_release_colors();

  // @@protoc_insertion_point(class_scope:ContainerProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClassifElementProto > cont_;
    ::ColorsElementProto* colors_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_drules_5fstruct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DashDotProto

// repeated double dd = 1;
inline int DashDotProto::_internal_dd_size() const {
  return _impl_.dd_.size();
}
inline int DashDotProto::dd_size() const {
  return _internal_dd_size();
}
inline void DashDotProto::clear_dd() {
  _impl_.dd_.Clear();
}
inline double DashDotProto::_internal_dd(int index) const {
  return _impl_.dd_.Get(index);
}
inline double DashDotProto::dd(int index) const {
  // @@protoc_insertion_point(field_get:DashDotProto.dd)
  return _internal_dd(index);
}
inline void DashDotProto::set_dd(int index, double value) {
  _impl_.dd_.Set(index, value);
  // @@protoc_insertion_point(field_set:DashDotProto.dd)
}
inline void DashDotProto::_internal_add_dd(double value) {
  _impl_.dd_.Add(value);
}
inline void DashDotProto::add_dd(double value) {
  _internal_add_dd(value);
  // @@protoc_insertion_point(field_add:DashDotProto.dd)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DashDotProto::_internal_dd() const {
  return _impl_.dd_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DashDotProto::dd() const {
  // @@protoc_insertion_point(field_list:DashDotProto.dd)
  return _internal_dd();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DashDotProto::_internal_mutable_dd() {
  return &_impl_.dd_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DashDotProto::mutable_dd() {
  // @@protoc_insertion_point(field_mutable_list:DashDotProto.dd)
  return _internal_mutable_dd();
}

// double offset = 2;
inline void DashDotProto::clear_offset() {
  _impl_.offset_ = 0;
}
inline double DashDotProto::_internal_offset() const {
  return _impl_.offset_;
}
inline double DashDotProto::offset() const {
  // @@protoc_insertion_point(field_get:DashDotProto.offset)
  return _internal_offset();
}
inline void DashDotProto::_internal_set_offset(double value) {
  
  _impl_.offset_ = value;
}
inline void DashDotProto::set_offset(double value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:DashDotProto.offset)
}

// -------------------------------------------------------------------

// PathSymProto

// string name = 1;
inline void PathSymProto::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& PathSymProto::name() const {
  // @@protoc_insertion_point(field_get:PathSymProto.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PathSymProto::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PathSymProto.name)
}
inline std::string* PathSymProto::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:PathSymProto.name)
  return _s;
}
inline const std::string& PathSymProto::_internal_name() const {
  return _impl_.name_.Get();
}
inline void PathSymProto::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* PathSymProto::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* PathSymProto::release_name() {
  // @@protoc_insertion_point(field_release:PathSymProto.name)
  return _impl_.name_.Release();
}
inline void PathSymProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PathSymProto.name)
}

// double step = 2;
inline void PathSymProto::clear_step() {
  _impl_.step_ = 0;
}
inline double PathSymProto::_internal_step() const {
  return _impl_.step_;
}
inline double PathSymProto::step() const {
  // @@protoc_insertion_point(field_get:PathSymProto.step)
  return _internal_step();
}
inline void PathSymProto::_internal_set_step(double value) {
  
  _impl_.step_ = value;
}
inline void PathSymProto::set_step(double value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:PathSymProto.step)
}

// double offset = 3;
inline void PathSymProto::clear_offset() {
  _impl_.offset_ = 0;
}
inline double PathSymProto::_internal_offset() const {
  return _impl_.offset_;
}
inline double PathSymProto::offset() const {
  // @@protoc_insertion_point(field_get:PathSymProto.offset)
  return _internal_offset();
}
inline void PathSymProto::_internal_set_offset(double value) {
  
  _impl_.offset_ = value;
}
inline void PathSymProto::set_offset(double value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:PathSymProto.offset)
}

// -------------------------------------------------------------------

// LineRuleProto

// double width = 1;
inline void LineRuleProto::clear_width() {
  _impl_.width_ = 0;
}
inline double LineRuleProto::_internal_width() const {
  return _impl_.width_;
}
inline double LineRuleProto::width() const {
  // @@protoc_insertion_point(field_get:LineRuleProto.width)
  return _internal_width();
}
inline void LineRuleProto::_internal_set_width(double value) {
  
  _impl_.width_ = value;
}
inline void LineRuleProto::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:LineRuleProto.width)
}

// uint32 color = 2;
inline void LineRuleProto::clear_color() {
  _impl_.color_ = 0u;
}
inline uint32_t LineRuleProto::_internal_color() const {
  return _impl_.color_;
}
inline uint32_t LineRuleProto::color() const {
  // @@protoc_insertion_point(field_get:LineRuleProto.color)
  return _internal_color();
}
inline void LineRuleProto::_internal_set_color(uint32_t value) {
  
  _impl_.color_ = value;
}
inline void LineRuleProto::set_color(uint32_t value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:LineRuleProto.color)
}

// .DashDotProto dashdot = 3;
inline bool LineRuleProto::_internal_has_dashdot() const {
  return this != internal_default_instance() && _impl_.dashdot_ != nullptr;
}
inline bool LineRuleProto::has_dashdot() const {
  return _internal_has_dashdot();
}
inline void LineRuleProto::clear_dashdot() {
  if (GetArenaForAllocation() == nullptr && _impl_.dashdot_ != nullptr) {
    delete _impl_.dashdot_;
  }
  _impl_.dashdot_ = nullptr;
}
inline const ::DashDotProto& LineRuleProto::_internal_dashdot() const {
  const ::DashDotProto* p = _impl_.dashdot_;
  return p != nullptr ? *p : reinterpret_cast<const ::DashDotProto&>(
      ::_DashDotProto_default_instance_);
}
inline const ::DashDotProto& LineRuleProto::dashdot() const {
  // @@protoc_insertion_point(field_get:LineRuleProto.dashdot)
  return _internal_dashdot();
}
inline void LineRuleProto::unsafe_arena_set_allocated_dashdot(
    ::DashDotProto* dashdot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dashdot_);
  }
  _impl_.dashdot_ = dashdot;
  if (dashdot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LineRuleProto.dashdot)
}
inline ::DashDotProto* LineRuleProto::release_dashdot() {
  
  ::DashDotProto* temp = _impl_.dashdot_;
  _impl_.dashdot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DashDotProto* LineRuleProto::unsafe_arena_release_dashdot() {
  // @@protoc_insertion_point(field_release:LineRuleProto.dashdot)
  
  ::DashDotProto* temp = _impl_.dashdot_;
  _impl_.dashdot_ = nullptr;
  return temp;
}
inline ::DashDotProto* LineRuleProto::_internal_mutable_dashdot() {
  
  if (_impl_.dashdot_ == nullptr) {
    auto* p = CreateMaybeMessage<::DashDotProto>(GetArenaForAllocation());
    _impl_.dashdot_ = p;
  }
  return _impl_.dashdot_;
}
inline ::DashDotProto* LineRuleProto::mutable_dashdot() {
  ::DashDotProto* _msg = _internal_mutable_dashdot();
  // @@protoc_insertion_point(field_mutable:LineRuleProto.dashdot)
  return _msg;
}
inline void LineRuleProto::set_allocated_dashdot(::DashDotProto* dashdot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.dashdot_;
  }
  if (dashdot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dashdot);
    if (message_arena != submessage_arena) {
      dashdot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dashdot, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dashdot_ = dashdot;
  // @@protoc_insertion_point(field_set_allocated:LineRuleProto.dashdot)
}

// int32 priority = 4;
inline void LineRuleProto::clear_priority() {
  _impl_.priority_ = 0;
}
inline int32_t LineRuleProto::_internal_priority() const {
  return _impl_.priority_;
}
inline int32_t LineRuleProto::priority() const {
  // @@protoc_insertion_point(field_get:LineRuleProto.priority)
  return _internal_priority();
}
inline void LineRuleProto::_internal_set_priority(int32_t value) {
  
  _impl_.priority_ = value;
}
inline void LineRuleProto::set_priority(int32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:LineRuleProto.priority)
}

// .PathSymProto pathsym = 5;
inline bool LineRuleProto::_internal_has_pathsym() const {
  return this != internal_default_instance() && _impl_.pathsym_ != nullptr;
}
inline bool LineRuleProto::has_pathsym() const {
  return _internal_has_pathsym();
}
inline void LineRuleProto::clear_pathsym() {
  if (GetArenaForAllocation() == nullptr && _impl_.pathsym_ != nullptr) {
    delete _impl_.pathsym_;
  }
  _impl_.pathsym_ = nullptr;
}
inline const ::PathSymProto& LineRuleProto::_internal_pathsym() const {
  const ::PathSymProto* p = _impl_.pathsym_;
  return p != nullptr ? *p : reinterpret_cast<const ::PathSymProto&>(
      ::_PathSymProto_default_instance_);
}
inline const ::PathSymProto& LineRuleProto::pathsym() const {
  // @@protoc_insertion_point(field_get:LineRuleProto.pathsym)
  return _internal_pathsym();
}
inline void LineRuleProto::unsafe_arena_set_allocated_pathsym(
    ::PathSymProto* pathsym) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pathsym_);
  }
  _impl_.pathsym_ = pathsym;
  if (pathsym) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LineRuleProto.pathsym)
}
inline ::PathSymProto* LineRuleProto::release_pathsym() {
  
  ::PathSymProto* temp = _impl_.pathsym_;
  _impl_.pathsym_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PathSymProto* LineRuleProto::unsafe_arena_release_pathsym() {
  // @@protoc_insertion_point(field_release:LineRuleProto.pathsym)
  
  ::PathSymProto* temp = _impl_.pathsym_;
  _impl_.pathsym_ = nullptr;
  return temp;
}
inline ::PathSymProto* LineRuleProto::_internal_mutable_pathsym() {
  
  if (_impl_.pathsym_ == nullptr) {
    auto* p = CreateMaybeMessage<::PathSymProto>(GetArenaForAllocation());
    _impl_.pathsym_ = p;
  }
  return _impl_.pathsym_;
}
inline ::PathSymProto* LineRuleProto::mutable_pathsym() {
  ::PathSymProto* _msg = _internal_mutable_pathsym();
  // @@protoc_insertion_point(field_mutable:LineRuleProto.pathsym)
  return _msg;
}
inline void LineRuleProto::set_allocated_pathsym(::PathSymProto* pathsym) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pathsym_;
  }
  if (pathsym) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pathsym);
    if (message_arena != submessage_arena) {
      pathsym = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pathsym, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pathsym_ = pathsym;
  // @@protoc_insertion_point(field_set_allocated:LineRuleProto.pathsym)
}

// .LineJoin join = 6;
inline void LineRuleProto::clear_join() {
  _impl_.join_ = 0;
}
inline ::LineJoin LineRuleProto::_internal_join() const {
  return static_cast< ::LineJoin >(_impl_.join_);
}
inline ::LineJoin LineRuleProto::join() const {
  // @@protoc_insertion_point(field_get:LineRuleProto.join)
  return _internal_join();
}
inline void LineRuleProto::_internal_set_join(::LineJoin value) {
  
  _impl_.join_ = value;
}
inline void LineRuleProto::set_join(::LineJoin value) {
  _internal_set_join(value);
  // @@protoc_insertion_point(field_set:LineRuleProto.join)
}

// .LineCap cap = 7;
inline void LineRuleProto::clear_cap() {
  _impl_.cap_ = 0;
}
inline ::LineCap LineRuleProto::_internal_cap() const {
  return static_cast< ::LineCap >(_impl_.cap_);
}
inline ::LineCap LineRuleProto::cap() const {
  // @@protoc_insertion_point(field_get:LineRuleProto.cap)
  return _internal_cap();
}
inline void LineRuleProto::_internal_set_cap(::LineCap value) {
  
  _impl_.cap_ = value;
}
inline void LineRuleProto::set_cap(::LineCap value) {
  _internal_set_cap(value);
  // @@protoc_insertion_point(field_set:LineRuleProto.cap)
}

// -------------------------------------------------------------------

// LineDefProto

// double width = 1;
inline void LineDefProto::clear_width() {
  _impl_.width_ = 0;
}
inline double LineDefProto::_internal_width() const {
  return _impl_.width_;
}
inline double LineDefProto::width() const {
  // @@protoc_insertion_point(field_get:LineDefProto.width)
  return _internal_width();
}
inline void LineDefProto::_internal_set_width(double value) {
  
  _impl_.width_ = value;
}
inline void LineDefProto::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:LineDefProto.width)
}

// uint32 color = 2;
inline void LineDefProto::clear_color() {
  _impl_.color_ = 0u;
}
inline uint32_t LineDefProto::_internal_color() const {
  return _impl_.color_;
}
inline uint32_t LineDefProto::color() const {
  // @@protoc_insertion_point(field_get:LineDefProto.color)
  return _internal_color();
}
inline void LineDefProto::_internal_set_color(uint32_t value) {
  
  _impl_.color_ = value;
}
inline void LineDefProto::set_color(uint32_t value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:LineDefProto.color)
}

// .DashDotProto dashdot = 3;
inline bool LineDefProto::_internal_has_dashdot() const {
  return this != internal_default_instance() && _impl_.dashdot_ != nullptr;
}
inline bool LineDefProto::has_dashdot() const {
  return _internal_has_dashdot();
}
inline void LineDefProto::clear_dashdot() {
  if (GetArenaForAllocation() == nullptr && _impl_.dashdot_ != nullptr) {
    delete _impl_.dashdot_;
  }
  _impl_.dashdot_ = nullptr;
}
inline const ::DashDotProto& LineDefProto::_internal_dashdot() const {
  const ::DashDotProto* p = _impl_.dashdot_;
  return p != nullptr ? *p : reinterpret_cast<const ::DashDotProto&>(
      ::_DashDotProto_default_instance_);
}
inline const ::DashDotProto& LineDefProto::dashdot() const {
  // @@protoc_insertion_point(field_get:LineDefProto.dashdot)
  return _internal_dashdot();
}
inline void LineDefProto::unsafe_arena_set_allocated_dashdot(
    ::DashDotProto* dashdot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dashdot_);
  }
  _impl_.dashdot_ = dashdot;
  if (dashdot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LineDefProto.dashdot)
}
inline ::DashDotProto* LineDefProto::release_dashdot() {
  
  ::DashDotProto* temp = _impl_.dashdot_;
  _impl_.dashdot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DashDotProto* LineDefProto::unsafe_arena_release_dashdot() {
  // @@protoc_insertion_point(field_release:LineDefProto.dashdot)
  
  ::DashDotProto* temp = _impl_.dashdot_;
  _impl_.dashdot_ = nullptr;
  return temp;
}
inline ::DashDotProto* LineDefProto::_internal_mutable_dashdot() {
  
  if (_impl_.dashdot_ == nullptr) {
    auto* p = CreateMaybeMessage<::DashDotProto>(GetArenaForAllocation());
    _impl_.dashdot_ = p;
  }
  return _impl_.dashdot_;
}
inline ::DashDotProto* LineDefProto::mutable_dashdot() {
  ::DashDotProto* _msg = _internal_mutable_dashdot();
  // @@protoc_insertion_point(field_mutable:LineDefProto.dashdot)
  return _msg;
}
inline void LineDefProto::set_allocated_dashdot(::DashDotProto* dashdot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.dashdot_;
  }
  if (dashdot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dashdot);
    if (message_arena != submessage_arena) {
      dashdot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dashdot, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dashdot_ = dashdot;
  // @@protoc_insertion_point(field_set_allocated:LineDefProto.dashdot)
}

// .PathSymProto pathsym = 4;
inline bool LineDefProto::_internal_has_pathsym() const {
  return this != internal_default_instance() && _impl_.pathsym_ != nullptr;
}
inline bool LineDefProto::has_pathsym() const {
  return _internal_has_pathsym();
}
inline void LineDefProto::clear_pathsym() {
  if (GetArenaForAllocation() == nullptr && _impl_.pathsym_ != nullptr) {
    delete _impl_.pathsym_;
  }
  _impl_.pathsym_ = nullptr;
}
inline const ::PathSymProto& LineDefProto::_internal_pathsym() const {
  const ::PathSymProto* p = _impl_.pathsym_;
  return p != nullptr ? *p : reinterpret_cast<const ::PathSymProto&>(
      ::_PathSymProto_default_instance_);
}
inline const ::PathSymProto& LineDefProto::pathsym() const {
  // @@protoc_insertion_point(field_get:LineDefProto.pathsym)
  return _internal_pathsym();
}
inline void LineDefProto::unsafe_arena_set_allocated_pathsym(
    ::PathSymProto* pathsym) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pathsym_);
  }
  _impl_.pathsym_ = pathsym;
  if (pathsym) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LineDefProto.pathsym)
}
inline ::PathSymProto* LineDefProto::release_pathsym() {
  
  ::PathSymProto* temp = _impl_.pathsym_;
  _impl_.pathsym_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PathSymProto* LineDefProto::unsafe_arena_release_pathsym() {
  // @@protoc_insertion_point(field_release:LineDefProto.pathsym)
  
  ::PathSymProto* temp = _impl_.pathsym_;
  _impl_.pathsym_ = nullptr;
  return temp;
}
inline ::PathSymProto* LineDefProto::_internal_mutable_pathsym() {
  
  if (_impl_.pathsym_ == nullptr) {
    auto* p = CreateMaybeMessage<::PathSymProto>(GetArenaForAllocation());
    _impl_.pathsym_ = p;
  }
  return _impl_.pathsym_;
}
inline ::PathSymProto* LineDefProto::mutable_pathsym() {
  ::PathSymProto* _msg = _internal_mutable_pathsym();
  // @@protoc_insertion_point(field_mutable:LineDefProto.pathsym)
  return _msg;
}
inline void LineDefProto::set_allocated_pathsym(::PathSymProto* pathsym) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pathsym_;
  }
  if (pathsym) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pathsym);
    if (message_arena != submessage_arena) {
      pathsym = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pathsym, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pathsym_ = pathsym;
  // @@protoc_insertion_point(field_set_allocated:LineDefProto.pathsym)
}

// .LineJoin join = 6;
inline void LineDefProto::clear_join() {
  _impl_.join_ = 0;
}
inline ::LineJoin LineDefProto::_internal_join() const {
  return static_cast< ::LineJoin >(_impl_.join_);
}
inline ::LineJoin LineDefProto::join() const {
  // @@protoc_insertion_point(field_get:LineDefProto.join)
  return _internal_join();
}
inline void LineDefProto::_internal_set_join(::LineJoin value) {
  
  _impl_.join_ = value;
}
inline void LineDefProto::set_join(::LineJoin value) {
  _internal_set_join(value);
  // @@protoc_insertion_point(field_set:LineDefProto.join)
}

// .LineCap cap = 7;
inline void LineDefProto::clear_cap() {
  _impl_.cap_ = 0;
}
inline ::LineCap LineDefProto::_internal_cap() const {
  return static_cast< ::LineCap >(_impl_.cap_);
}
inline ::LineCap LineDefProto::cap() const {
  // @@protoc_insertion_point(field_get:LineDefProto.cap)
  return _internal_cap();
}
inline void LineDefProto::_internal_set_cap(::LineCap value) {
  
  _impl_.cap_ = value;
}
inline void LineDefProto::set_cap(::LineCap value) {
  _internal_set_cap(value);
  // @@protoc_insertion_point(field_set:LineDefProto.cap)
}

// -------------------------------------------------------------------

// AreaRuleProto

// uint32 color = 1;
inline void AreaRuleProto::clear_color() {
  _impl_.color_ = 0u;
}
inline uint32_t AreaRuleProto::_internal_color() const {
  return _impl_.color_;
}
inline uint32_t AreaRuleProto::color() const {
  // @@protoc_insertion_point(field_get:AreaRuleProto.color)
  return _internal_color();
}
inline void AreaRuleProto::_internal_set_color(uint32_t value) {
  
  _impl_.color_ = value;
}
inline void AreaRuleProto::set_color(uint32_t value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:AreaRuleProto.color)
}

// .LineDefProto border = 2;
inline bool AreaRuleProto::_internal_has_border() const {
  return this != internal_default_instance() && _impl_.border_ != nullptr;
}
inline bool AreaRuleProto::has_border() const {
  return _internal_has_border();
}
inline void AreaRuleProto::clear_border() {
  if (GetArenaForAllocation() == nullptr && _impl_.border_ != nullptr) {
    delete _impl_.border_;
  }
  _impl_.border_ = nullptr;
}
inline const ::LineDefProto& AreaRuleProto::_internal_border() const {
  const ::LineDefProto* p = _impl_.border_;
  return p != nullptr ? *p : reinterpret_cast<const ::LineDefProto&>(
      ::_LineDefProto_default_instance_);
}
inline const ::LineDefProto& AreaRuleProto::border() const {
  // @@protoc_insertion_point(field_get:AreaRuleProto.border)
  return _internal_border();
}
inline void AreaRuleProto::unsafe_arena_set_allocated_border(
    ::LineDefProto* border) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.border_);
  }
  _impl_.border_ = border;
  if (border) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AreaRuleProto.border)
}
inline ::LineDefProto* AreaRuleProto::release_border() {
  
  ::LineDefProto* temp = _impl_.border_;
  _impl_.border_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::LineDefProto* AreaRuleProto::unsafe_arena_release_border() {
  // @@protoc_insertion_point(field_release:AreaRuleProto.border)
  
  ::LineDefProto* temp = _impl_.border_;
  _impl_.border_ = nullptr;
  return temp;
}
inline ::LineDefProto* AreaRuleProto::_internal_mutable_border() {
  
  if (_impl_.border_ == nullptr) {
    auto* p = CreateMaybeMessage<::LineDefProto>(GetArenaForAllocation());
    _impl_.border_ = p;
  }
  return _impl_.border_;
}
inline ::LineDefProto* AreaRuleProto::mutable_border() {
  ::LineDefProto* _msg = _internal_mutable_border();
  // @@protoc_insertion_point(field_mutable:AreaRuleProto.border)
  return _msg;
}
inline void AreaRuleProto::set_allocated_border(::LineDefProto* border) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.border_;
  }
  if (border) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(border);
    if (message_arena != submessage_arena) {
      border = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, border, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.border_ = border;
  // @@protoc_insertion_point(field_set_allocated:AreaRuleProto.border)
}

// int32 priority = 3;
inline void AreaRuleProto::clear_priority() {
  _impl_.priority_ = 0;
}
inline int32_t AreaRuleProto::_internal_priority() const {
  return _impl_.priority_;
}
inline int32_t AreaRuleProto::priority() const {
  // @@protoc_insertion_point(field_get:AreaRuleProto.priority)
  return _internal_priority();
}
inline void AreaRuleProto::_internal_set_priority(int32_t value) {
  
  _impl_.priority_ = value;
}
inline void AreaRuleProto::set_priority(int32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:AreaRuleProto.priority)
}

// -------------------------------------------------------------------

// SymbolRuleProto

// string name = 1;
inline void SymbolRuleProto::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SymbolRuleProto::name() const {
  // @@protoc_insertion_point(field_get:SymbolRuleProto.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SymbolRuleProto::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SymbolRuleProto.name)
}
inline std::string* SymbolRuleProto::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:SymbolRuleProto.name)
  return _s;
}
inline const std::string& SymbolRuleProto::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SymbolRuleProto::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SymbolRuleProto::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SymbolRuleProto::release_name() {
  // @@protoc_insertion_point(field_release:SymbolRuleProto.name)
  return _impl_.name_.Release();
}
inline void SymbolRuleProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SymbolRuleProto.name)
}

// int32 apply_for_type = 2;
inline void SymbolRuleProto::clear_apply_for_type() {
  _impl_.apply_for_type_ = 0;
}
inline int32_t SymbolRuleProto::_internal_apply_for_type() const {
  return _impl_.apply_for_type_;
}
inline int32_t SymbolRuleProto::apply_for_type() const {
  // @@protoc_insertion_point(field_get:SymbolRuleProto.apply_for_type)
  return _internal_apply_for_type();
}
inline void SymbolRuleProto::_internal_set_apply_for_type(int32_t value) {
  
  _impl_.apply_for_type_ = value;
}
inline void SymbolRuleProto::set_apply_for_type(int32_t value) {
  _internal_set_apply_for_type(value);
  // @@protoc_insertion_point(field_set:SymbolRuleProto.apply_for_type)
}

// int32 priority = 3;
inline void SymbolRuleProto::clear_priority() {
  _impl_.priority_ = 0;
}
inline int32_t SymbolRuleProto::_internal_priority() const {
  return _impl_.priority_;
}
inline int32_t SymbolRuleProto::priority() const {
  // @@protoc_insertion_point(field_get:SymbolRuleProto.priority)
  return _internal_priority();
}
inline void SymbolRuleProto::_internal_set_priority(int32_t value) {
  
  _impl_.priority_ = value;
}
inline void SymbolRuleProto::set_priority(int32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:SymbolRuleProto.priority)
}

// int32 min_distance = 4;
inline void SymbolRuleProto::clear_min_distance() {
  _impl_.min_distance_ = 0;
}
inline int32_t SymbolRuleProto::_internal_min_distance() const {
  return _impl_.min_distance_;
}
inline int32_t SymbolRuleProto::min_distance() const {
  // @@protoc_insertion_point(field_get:SymbolRuleProto.min_distance)
  return _internal_min_distance();
}
inline void SymbolRuleProto::_internal_set_min_distance(int32_t value) {
  
  _impl_.min_distance_ = value;
}
inline void SymbolRuleProto::set_min_distance(int32_t value) {
  _internal_set_min_distance(value);
  // @@protoc_insertion_point(field_set:SymbolRuleProto.min_distance)
}

// -------------------------------------------------------------------

// CaptionDefProto

// int32 height = 1;
inline void CaptionDefProto::clear_height() {
  _impl_.height_ = 0;
}
inline int32_t CaptionDefProto::_internal_height() const {
  return _impl_.height_;
}
inline int32_t CaptionDefProto::height() const {
  // @@protoc_insertion_point(field_get:CaptionDefProto.height)
  return _internal_height();
}
inline void CaptionDefProto::_internal_set_height(int32_t value) {
  
  _impl_.height_ = value;
}
inline void CaptionDefProto::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:CaptionDefProto.height)
}

// uint32 color = 2;
inline void CaptionDefProto::clear_color() {
  _impl_.color_ = 0u;
}
inline uint32_t CaptionDefProto::_internal_color() const {
  return _impl_.color_;
}
inline uint32_t CaptionDefProto::color() const {
  // @@protoc_insertion_point(field_get:CaptionDefProto.color)
  return _internal_color();
}
inline void CaptionDefProto::_internal_set_color(uint32_t value) {
  
  _impl_.color_ = value;
}
inline void CaptionDefProto::set_color(uint32_t value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:CaptionDefProto.color)
}

// uint32 stroke_color = 3;
inline void CaptionDefProto::clear_stroke_color() {
  _impl_.stroke_color_ = 0u;
}
inline uint32_t CaptionDefProto::_internal_stroke_color() const {
  return _impl_.stroke_color_;
}
inline uint32_t CaptionDefProto::stroke_color() const {
  // @@protoc_insertion_point(field_get:CaptionDefProto.stroke_color)
  return _internal_stroke_color();
}
inline void CaptionDefProto::_internal_set_stroke_color(uint32_t value) {
  
  _impl_.stroke_color_ = value;
}
inline void CaptionDefProto::set_stroke_color(uint32_t value) {
  _internal_set_stroke_color(value);
  // @@protoc_insertion_point(field_set:CaptionDefProto.stroke_color)
}

// int32 offset_x = 4;
inline void CaptionDefProto::clear_offset_x() {
  _impl_.offset_x_ = 0;
}
inline int32_t CaptionDefProto::_internal_offset_x() const {
  return _impl_.offset_x_;
}
inline int32_t CaptionDefProto::offset_x() const {
  // @@protoc_insertion_point(field_get:CaptionDefProto.offset_x)
  return _internal_offset_x();
}
inline void CaptionDefProto::_internal_set_offset_x(int32_t value) {
  
  _impl_.offset_x_ = value;
}
inline void CaptionDefProto::set_offset_x(int32_t value) {
  _internal_set_offset_x(value);
  // @@protoc_insertion_point(field_set:CaptionDefProto.offset_x)
}

// int32 offset_y = 5;
inline void CaptionDefProto::clear_offset_y() {
  _impl_.offset_y_ = 0;
}
inline int32_t CaptionDefProto::_internal_offset_y() const {
  return _impl_.offset_y_;
}
inline int32_t CaptionDefProto::offset_y() const {
  // @@protoc_insertion_point(field_get:CaptionDefProto.offset_y)
  return _internal_offset_y();
}
inline void CaptionDefProto::_internal_set_offset_y(int32_t value) {
  
  _impl_.offset_y_ = value;
}
inline void CaptionDefProto::set_offset_y(int32_t value) {
  _internal_set_offset_y(value);
  // @@protoc_insertion_point(field_set:CaptionDefProto.offset_y)
}

// string text = 6;
inline void CaptionDefProto::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& CaptionDefProto::text() const {
  // @@protoc_insertion_point(field_get:CaptionDefProto.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CaptionDefProto::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CaptionDefProto.text)
}
inline std::string* CaptionDefProto::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:CaptionDefProto.text)
  return _s;
}
inline const std::string& CaptionDefProto::_internal_text() const {
  return _impl_.text_.Get();
}
inline void CaptionDefProto::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* CaptionDefProto::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* CaptionDefProto::release_text() {
  // @@protoc_insertion_point(field_release:CaptionDefProto.text)
  return _impl_.text_.Release();
}
inline void CaptionDefProto::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CaptionDefProto.text)
}

// bool is_optional = 7;
inline void CaptionDefProto::clear_is_optional() {
  _impl_.is_optional_ = false;
}
inline bool CaptionDefProto::_internal_is_optional() const {
  return _impl_.is_optional_;
}
inline bool CaptionDefProto::is_optional() const {
  // @@protoc_insertion_point(field_get:CaptionDefProto.is_optional)
  return _internal_is_optional();
}
inline void CaptionDefProto::_internal_set_is_optional(bool value) {
  
  _impl_.is_optional_ = value;
}
inline void CaptionDefProto::set_is_optional(bool value) {
  _internal_set_is_optional(value);
  // @@protoc_insertion_point(field_set:CaptionDefProto.is_optional)
}

// -------------------------------------------------------------------

// CaptionRuleProto

// .CaptionDefProto primary = 1;
inline bool CaptionRuleProto::_internal_has_primary() const {
  return this != internal_default_instance() && _impl_.primary_ != nullptr;
}
inline bool CaptionRuleProto::has_primary() const {
  return _internal_has_primary();
}
inline void CaptionRuleProto::clear_primary() {
  if (GetArenaForAllocation() == nullptr && _impl_.primary_ != nullptr) {
    delete _impl_.primary_;
  }
  _impl_.primary_ = nullptr;
}
inline const ::CaptionDefProto& CaptionRuleProto::_internal_primary() const {
  const ::CaptionDefProto* p = _impl_.primary_;
  return p != nullptr ? *p : reinterpret_cast<const ::CaptionDefProto&>(
      ::_CaptionDefProto_default_instance_);
}
inline const ::CaptionDefProto& CaptionRuleProto::primary() const {
  // @@protoc_insertion_point(field_get:CaptionRuleProto.primary)
  return _internal_primary();
}
inline void CaptionRuleProto::unsafe_arena_set_allocated_primary(
    ::CaptionDefProto* primary) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.primary_);
  }
  _impl_.primary_ = primary;
  if (primary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CaptionRuleProto.primary)
}
inline ::CaptionDefProto* CaptionRuleProto::release_primary() {
  
  ::CaptionDefProto* temp = _impl_.primary_;
  _impl_.primary_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CaptionDefProto* CaptionRuleProto::unsafe_arena_release_primary() {
  // @@protoc_insertion_point(field_release:CaptionRuleProto.primary)
  
  ::CaptionDefProto* temp = _impl_.primary_;
  _impl_.primary_ = nullptr;
  return temp;
}
inline ::CaptionDefProto* CaptionRuleProto::_internal_mutable_primary() {
  
  if (_impl_.primary_ == nullptr) {
    auto* p = CreateMaybeMessage<::CaptionDefProto>(GetArenaForAllocation());
    _impl_.primary_ = p;
  }
  return _impl_.primary_;
}
inline ::CaptionDefProto* CaptionRuleProto::mutable_primary() {
  ::CaptionDefProto* _msg = _internal_mutable_primary();
  // @@protoc_insertion_point(field_mutable:CaptionRuleProto.primary)
  return _msg;
}
inline void CaptionRuleProto::set_allocated_primary(::CaptionDefProto* primary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.primary_;
  }
  if (primary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(primary);
    if (message_arena != submessage_arena) {
      primary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, primary, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.primary_ = primary;
  // @@protoc_insertion_point(field_set_allocated:CaptionRuleProto.primary)
}

// .CaptionDefProto secondary = 2;
inline bool CaptionRuleProto::_internal_has_secondary() const {
  return this != internal_default_instance() && _impl_.secondary_ != nullptr;
}
inline bool CaptionRuleProto::has_secondary() const {
  return _internal_has_secondary();
}
inline void CaptionRuleProto::clear_secondary() {
  if (GetArenaForAllocation() == nullptr && _impl_.secondary_ != nullptr) {
    delete _impl_.secondary_;
  }
  _impl_.secondary_ = nullptr;
}
inline const ::CaptionDefProto& CaptionRuleProto::_internal_secondary() const {
  const ::CaptionDefProto* p = _impl_.secondary_;
  return p != nullptr ? *p : reinterpret_cast<const ::CaptionDefProto&>(
      ::_CaptionDefProto_default_instance_);
}
inline const ::CaptionDefProto& CaptionRuleProto::secondary() const {
  // @@protoc_insertion_point(field_get:CaptionRuleProto.secondary)
  return _internal_secondary();
}
inline void CaptionRuleProto::unsafe_arena_set_allocated_secondary(
    ::CaptionDefProto* secondary) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.secondary_);
  }
  _impl_.secondary_ = secondary;
  if (secondary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CaptionRuleProto.secondary)
}
inline ::CaptionDefProto* CaptionRuleProto::release_secondary() {
  
  ::CaptionDefProto* temp = _impl_.secondary_;
  _impl_.secondary_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CaptionDefProto* CaptionRuleProto::unsafe_arena_release_secondary() {
  // @@protoc_insertion_point(field_release:CaptionRuleProto.secondary)
  
  ::CaptionDefProto* temp = _impl_.secondary_;
  _impl_.secondary_ = nullptr;
  return temp;
}
inline ::CaptionDefProto* CaptionRuleProto::_internal_mutable_secondary() {
  
  if (_impl_.secondary_ == nullptr) {
    auto* p = CreateMaybeMessage<::CaptionDefProto>(GetArenaForAllocation());
    _impl_.secondary_ = p;
  }
  return _impl_.secondary_;
}
inline ::CaptionDefProto* CaptionRuleProto::mutable_secondary() {
  ::CaptionDefProto* _msg = _internal_mutable_secondary();
  // @@protoc_insertion_point(field_mutable:CaptionRuleProto.secondary)
  return _msg;
}
inline void CaptionRuleProto::set_allocated_secondary(::CaptionDefProto* secondary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.secondary_;
  }
  if (secondary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(secondary);
    if (message_arena != submessage_arena) {
      secondary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, secondary, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.secondary_ = secondary;
  // @@protoc_insertion_point(field_set_allocated:CaptionRuleProto.secondary)
}

// int32 priority = 3;
inline void CaptionRuleProto::clear_priority() {
  _impl_.priority_ = 0;
}
inline int32_t CaptionRuleProto::_internal_priority() const {
  return _impl_.priority_;
}
inline int32_t CaptionRuleProto::priority() const {
  // @@protoc_insertion_point(field_get:CaptionRuleProto.priority)
  return _internal_priority();
}
inline void CaptionRuleProto::_internal_set_priority(int32_t value) {
  
  _impl_.priority_ = value;
}
inline void CaptionRuleProto::set_priority(int32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:CaptionRuleProto.priority)
}

// -------------------------------------------------------------------

// CircleRuleProto

// double radius = 1;
inline void CircleRuleProto::clear_radius() {
  _impl_.radius_ = 0;
}
inline double CircleRuleProto::_internal_radius() const {
  return _impl_.radius_;
}
inline double CircleRuleProto::radius() const {
  // @@protoc_insertion_point(field_get:CircleRuleProto.radius)
  return _internal_radius();
}
inline void CircleRuleProto::_internal_set_radius(double value) {
  
  _impl_.radius_ = value;
}
inline void CircleRuleProto::set_radius(double value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:CircleRuleProto.radius)
}

// uint32 color = 2;
inline void CircleRuleProto::clear_color() {
  _impl_.color_ = 0u;
}
inline uint32_t CircleRuleProto::_internal_color() const {
  return _impl_.color_;
}
inline uint32_t CircleRuleProto::color() const {
  // @@protoc_insertion_point(field_get:CircleRuleProto.color)
  return _internal_color();
}
inline void CircleRuleProto::_internal_set_color(uint32_t value) {
  
  _impl_.color_ = value;
}
inline void CircleRuleProto::set_color(uint32_t value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:CircleRuleProto.color)
}

// .LineDefProto border = 3;
inline bool CircleRuleProto::_internal_has_border() const {
  return this != internal_default_instance() && _impl_.border_ != nullptr;
}
inline bool CircleRuleProto::has_border() const {
  return _internal_has_border();
}
inline void CircleRuleProto::clear_border() {
  if (GetArenaForAllocation() == nullptr && _impl_.border_ != nullptr) {
    delete _impl_.border_;
  }
  _impl_.border_ = nullptr;
}
inline const ::LineDefProto& CircleRuleProto::_internal_border() const {
  const ::LineDefProto* p = _impl_.border_;
  return p != nullptr ? *p : reinterpret_cast<const ::LineDefProto&>(
      ::_LineDefProto_default_instance_);
}
inline const ::LineDefProto& CircleRuleProto::border() const {
  // @@protoc_insertion_point(field_get:CircleRuleProto.border)
  return _internal_border();
}
inline void CircleRuleProto::unsafe_arena_set_allocated_border(
    ::LineDefProto* border) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.border_);
  }
  _impl_.border_ = border;
  if (border) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CircleRuleProto.border)
}
inline ::LineDefProto* CircleRuleProto::release_border() {
  
  ::LineDefProto* temp = _impl_.border_;
  _impl_.border_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::LineDefProto* CircleRuleProto::unsafe_arena_release_border() {
  // @@protoc_insertion_point(field_release:CircleRuleProto.border)
  
  ::LineDefProto* temp = _impl_.border_;
  _impl_.border_ = nullptr;
  return temp;
}
inline ::LineDefProto* CircleRuleProto::_internal_mutable_border() {
  
  if (_impl_.border_ == nullptr) {
    auto* p = CreateMaybeMessage<::LineDefProto>(GetArenaForAllocation());
    _impl_.border_ = p;
  }
  return _impl_.border_;
}
inline ::LineDefProto* CircleRuleProto::mutable_border() {
  ::LineDefProto* _msg = _internal_mutable_border();
  // @@protoc_insertion_point(field_mutable:CircleRuleProto.border)
  return _msg;
}
inline void CircleRuleProto::set_allocated_border(::LineDefProto* border) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.border_;
  }
  if (border) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(border);
    if (message_arena != submessage_arena) {
      border = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, border, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.border_ = border;
  // @@protoc_insertion_point(field_set_allocated:CircleRuleProto.border)
}

// int32 priority = 4;
inline void CircleRuleProto::clear_priority() {
  _impl_.priority_ = 0;
}
inline int32_t CircleRuleProto::_internal_priority() const {
  return _impl_.priority_;
}
inline int32_t CircleRuleProto::priority() const {
  // @@protoc_insertion_point(field_get:CircleRuleProto.priority)
  return _internal_priority();
}
inline void CircleRuleProto::_internal_set_priority(int32_t value) {
  
  _impl_.priority_ = value;
}
inline void CircleRuleProto::set_priority(int32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:CircleRuleProto.priority)
}

// -------------------------------------------------------------------

// PathTextRuleProto

// .CaptionDefProto primary = 1;
inline bool PathTextRuleProto::_internal_has_primary() const {
  return this != internal_default_instance() && _impl_.primary_ != nullptr;
}
inline bool PathTextRuleProto::has_primary() const {
  return _internal_has_primary();
}
inline void PathTextRuleProto::clear_primary() {
  if (GetArenaForAllocation() == nullptr && _impl_.primary_ != nullptr) {
    delete _impl_.primary_;
  }
  _impl_.primary_ = nullptr;
}
inline const ::CaptionDefProto& PathTextRuleProto::_internal_primary() const {
  const ::CaptionDefProto* p = _impl_.primary_;
  return p != nullptr ? *p : reinterpret_cast<const ::CaptionDefProto&>(
      ::_CaptionDefProto_default_instance_);
}
inline const ::CaptionDefProto& PathTextRuleProto::primary() const {
  // @@protoc_insertion_point(field_get:PathTextRuleProto.primary)
  return _internal_primary();
}
inline void PathTextRuleProto::unsafe_arena_set_allocated_primary(
    ::CaptionDefProto* primary) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.primary_);
  }
  _impl_.primary_ = primary;
  if (primary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PathTextRuleProto.primary)
}
inline ::CaptionDefProto* PathTextRuleProto::release_primary() {
  
  ::CaptionDefProto* temp = _impl_.primary_;
  _impl_.primary_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CaptionDefProto* PathTextRuleProto::unsafe_arena_release_primary() {
  // @@protoc_insertion_point(field_release:PathTextRuleProto.primary)
  
  ::CaptionDefProto* temp = _impl_.primary_;
  _impl_.primary_ = nullptr;
  return temp;
}
inline ::CaptionDefProto* PathTextRuleProto::_internal_mutable_primary() {
  
  if (_impl_.primary_ == nullptr) {
    auto* p = CreateMaybeMessage<::CaptionDefProto>(GetArenaForAllocation());
    _impl_.primary_ = p;
  }
  return _impl_.primary_;
}
inline ::CaptionDefProto* PathTextRuleProto::mutable_primary() {
  ::CaptionDefProto* _msg = _internal_mutable_primary();
  // @@protoc_insertion_point(field_mutable:PathTextRuleProto.primary)
  return _msg;
}
inline void PathTextRuleProto::set_allocated_primary(::CaptionDefProto* primary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.primary_;
  }
  if (primary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(primary);
    if (message_arena != submessage_arena) {
      primary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, primary, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.primary_ = primary;
  // @@protoc_insertion_point(field_set_allocated:PathTextRuleProto.primary)
}

// .CaptionDefProto secondary = 2;
inline bool PathTextRuleProto::_internal_has_secondary() const {
  return this != internal_default_instance() && _impl_.secondary_ != nullptr;
}
inline bool PathTextRuleProto::has_secondary() const {
  return _internal_has_secondary();
}
inline void PathTextRuleProto::clear_secondary() {
  if (GetArenaForAllocation() == nullptr && _impl_.secondary_ != nullptr) {
    delete _impl_.secondary_;
  }
  _impl_.secondary_ = nullptr;
}
inline const ::CaptionDefProto& PathTextRuleProto::_internal_secondary() const {
  const ::CaptionDefProto* p = _impl_.secondary_;
  return p != nullptr ? *p : reinterpret_cast<const ::CaptionDefProto&>(
      ::_CaptionDefProto_default_instance_);
}
inline const ::CaptionDefProto& PathTextRuleProto::secondary() const {
  // @@protoc_insertion_point(field_get:PathTextRuleProto.secondary)
  return _internal_secondary();
}
inline void PathTextRuleProto::unsafe_arena_set_allocated_secondary(
    ::CaptionDefProto* secondary) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.secondary_);
  }
  _impl_.secondary_ = secondary;
  if (secondary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PathTextRuleProto.secondary)
}
inline ::CaptionDefProto* PathTextRuleProto::release_secondary() {
  
  ::CaptionDefProto* temp = _impl_.secondary_;
  _impl_.secondary_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CaptionDefProto* PathTextRuleProto::unsafe_arena_release_secondary() {
  // @@protoc_insertion_point(field_release:PathTextRuleProto.secondary)
  
  ::CaptionDefProto* temp = _impl_.secondary_;
  _impl_.secondary_ = nullptr;
  return temp;
}
inline ::CaptionDefProto* PathTextRuleProto::_internal_mutable_secondary() {
  
  if (_impl_.secondary_ == nullptr) {
    auto* p = CreateMaybeMessage<::CaptionDefProto>(GetArenaForAllocation());
    _impl_.secondary_ = p;
  }
  return _impl_.secondary_;
}
inline ::CaptionDefProto* PathTextRuleProto::mutable_secondary() {
  ::CaptionDefProto* _msg = _internal_mutable_secondary();
  // @@protoc_insertion_point(field_mutable:PathTextRuleProto.secondary)
  return _msg;
}
inline void PathTextRuleProto::set_allocated_secondary(::CaptionDefProto* secondary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.secondary_;
  }
  if (secondary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(secondary);
    if (message_arena != submessage_arena) {
      secondary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, secondary, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.secondary_ = secondary;
  // @@protoc_insertion_point(field_set_allocated:PathTextRuleProto.secondary)
}

// int32 priority = 3;
inline void PathTextRuleProto::clear_priority() {
  _impl_.priority_ = 0;
}
inline int32_t PathTextRuleProto::_internal_priority() const {
  return _impl_.priority_;
}
inline int32_t PathTextRuleProto::priority() const {
  // @@protoc_insertion_point(field_get:PathTextRuleProto.priority)
  return _internal_priority();
}
inline void PathTextRuleProto::_internal_set_priority(int32_t value) {
  
  _impl_.priority_ = value;
}
inline void PathTextRuleProto::set_priority(int32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:PathTextRuleProto.priority)
}

// -------------------------------------------------------------------

// ShieldRuleProto

// int32 height = 1;
inline void ShieldRuleProto::clear_height() {
  _impl_.height_ = 0;
}
inline int32_t ShieldRuleProto::_internal_height() const {
  return _impl_.height_;
}
inline int32_t ShieldRuleProto::height() const {
  // @@protoc_insertion_point(field_get:ShieldRuleProto.height)
  return _internal_height();
}
inline void ShieldRuleProto::_internal_set_height(int32_t value) {
  
  _impl_.height_ = value;
}
inline void ShieldRuleProto::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:ShieldRuleProto.height)
}

// uint32 color = 2;
inline void ShieldRuleProto::clear_color() {
  _impl_.color_ = 0u;
}
inline uint32_t ShieldRuleProto::_internal_color() const {
  return _impl_.color_;
}
inline uint32_t ShieldRuleProto::color() const {
  // @@protoc_insertion_point(field_get:ShieldRuleProto.color)
  return _internal_color();
}
inline void ShieldRuleProto::_internal_set_color(uint32_t value) {
  
  _impl_.color_ = value;
}
inline void ShieldRuleProto::set_color(uint32_t value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:ShieldRuleProto.color)
}

// uint32 stroke_color = 3;
inline void ShieldRuleProto::clear_stroke_color() {
  _impl_.stroke_color_ = 0u;
}
inline uint32_t ShieldRuleProto::_internal_stroke_color() const {
  return _impl_.stroke_color_;
}
inline uint32_t ShieldRuleProto::stroke_color() const {
  // @@protoc_insertion_point(field_get:ShieldRuleProto.stroke_color)
  return _internal_stroke_color();
}
inline void ShieldRuleProto::_internal_set_stroke_color(uint32_t value) {
  
  _impl_.stroke_color_ = value;
}
inline void ShieldRuleProto::set_stroke_color(uint32_t value) {
  _internal_set_stroke_color(value);
  // @@protoc_insertion_point(field_set:ShieldRuleProto.stroke_color)
}

// int32 priority = 4;
inline void ShieldRuleProto::clear_priority() {
  _impl_.priority_ = 0;
}
inline int32_t ShieldRuleProto::_internal_priority() const {
  return _impl_.priority_;
}
inline int32_t ShieldRuleProto::priority() const {
  // @@protoc_insertion_point(field_get:ShieldRuleProto.priority)
  return _internal_priority();
}
inline void ShieldRuleProto::_internal_set_priority(int32_t value) {
  
  _impl_.priority_ = value;
}
inline void ShieldRuleProto::set_priority(int32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:ShieldRuleProto.priority)
}

// int32 min_distance = 5;
inline void ShieldRuleProto::clear_min_distance() {
  _impl_.min_distance_ = 0;
}
inline int32_t ShieldRuleProto::_internal_min_distance() const {
  return _impl_.min_distance_;
}
inline int32_t ShieldRuleProto::min_distance() const {
  // @@protoc_insertion_point(field_get:ShieldRuleProto.min_distance)
  return _internal_min_distance();
}
inline void ShieldRuleProto::_internal_set_min_distance(int32_t value) {
  
  _impl_.min_distance_ = value;
}
inline void ShieldRuleProto::set_min_distance(int32_t value) {
  _internal_set_min_distance(value);
  // @@protoc_insertion_point(field_set:ShieldRuleProto.min_distance)
}

// uint32 text_color = 6;
inline void ShieldRuleProto::clear_text_color() {
  _impl_.text_color_ = 0u;
}
inline uint32_t ShieldRuleProto::_internal_text_color() const {
  return _impl_.text_color_;
}
inline uint32_t ShieldRuleProto::text_color() const {
  // @@protoc_insertion_point(field_get:ShieldRuleProto.text_color)
  return _internal_text_color();
}
inline void ShieldRuleProto::_internal_set_text_color(uint32_t value) {
  
  _impl_.text_color_ = value;
}
inline void ShieldRuleProto::set_text_color(uint32_t value) {
  _internal_set_text_color(value);
  // @@protoc_insertion_point(field_set:ShieldRuleProto.text_color)
}

// uint32 text_stroke_color = 7;
inline void ShieldRuleProto::clear_text_stroke_color() {
  _impl_.text_stroke_color_ = 0u;
}
inline uint32_t ShieldRuleProto::_internal_text_stroke_color() const {
  return _impl_.text_stroke_color_;
}
inline uint32_t ShieldRuleProto::text_stroke_color() const {
  // @@protoc_insertion_point(field_get:ShieldRuleProto.text_stroke_color)
  return _internal_text_stroke_color();
}
inline void ShieldRuleProto::_internal_set_text_stroke_color(uint32_t value) {
  
  _impl_.text_stroke_color_ = value;
}
inline void ShieldRuleProto::set_text_stroke_color(uint32_t value) {
  _internal_set_text_stroke_color(value);
  // @@protoc_insertion_point(field_set:ShieldRuleProto.text_stroke_color)
}

// -------------------------------------------------------------------

// DrawElementProto

// int32 scale = 1;
inline void DrawElementProto::clear_scale() {
  _impl_.scale_ = 0;
}
inline int32_t DrawElementProto::_internal_scale() const {
  return _impl_.scale_;
}
inline int32_t DrawElementProto::scale() const {
  // @@protoc_insertion_point(field_get:DrawElementProto.scale)
  return _internal_scale();
}
inline void DrawElementProto::_internal_set_scale(int32_t value) {
  
  _impl_.scale_ = value;
}
inline void DrawElementProto::set_scale(int32_t value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:DrawElementProto.scale)
}

// repeated .LineRuleProto lines = 2;
inline int DrawElementProto::_internal_lines_size() const {
  return _impl_.lines_.size();
}
inline int DrawElementProto::lines_size() const {
  return _internal_lines_size();
}
inline void DrawElementProto::clear_lines() {
  _impl_.lines_.Clear();
}
inline ::LineRuleProto* DrawElementProto::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:DrawElementProto.lines)
  return _impl_.lines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LineRuleProto >*
DrawElementProto::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:DrawElementProto.lines)
  return &_impl_.lines_;
}
inline const ::LineRuleProto& DrawElementProto::_internal_lines(int index) const {
  return _impl_.lines_.Get(index);
}
inline const ::LineRuleProto& DrawElementProto::lines(int index) const {
  // @@protoc_insertion_point(field_get:DrawElementProto.lines)
  return _internal_lines(index);
}
inline ::LineRuleProto* DrawElementProto::_internal_add_lines() {
  return _impl_.lines_.Add();
}
inline ::LineRuleProto* DrawElementProto::add_lines() {
  ::LineRuleProto* _add = _internal_add_lines();
  // @@protoc_insertion_point(field_add:DrawElementProto.lines)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LineRuleProto >&
DrawElementProto::lines() const {
  // @@protoc_insertion_point(field_list:DrawElementProto.lines)
  return _impl_.lines_;
}

// .AreaRuleProto area = 3;
inline bool DrawElementProto::_internal_has_area() const {
  return this != internal_default_instance() && _impl_.area_ != nullptr;
}
inline bool DrawElementProto::has_area() const {
  return _internal_has_area();
}
inline void DrawElementProto::clear_area() {
  if (GetArenaForAllocation() == nullptr && _impl_.area_ != nullptr) {
    delete _impl_.area_;
  }
  _impl_.area_ = nullptr;
}
inline const ::AreaRuleProto& DrawElementProto::_internal_area() const {
  const ::AreaRuleProto* p = _impl_.area_;
  return p != nullptr ? *p : reinterpret_cast<const ::AreaRuleProto&>(
      ::_AreaRuleProto_default_instance_);
}
inline const ::AreaRuleProto& DrawElementProto::area() const {
  // @@protoc_insertion_point(field_get:DrawElementProto.area)
  return _internal_area();
}
inline void DrawElementProto::unsafe_arena_set_allocated_area(
    ::AreaRuleProto* area) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.area_);
  }
  _impl_.area_ = area;
  if (area) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DrawElementProto.area)
}
inline ::AreaRuleProto* DrawElementProto::release_area() {
  
  ::AreaRuleProto* temp = _impl_.area_;
  _impl_.area_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AreaRuleProto* DrawElementProto::unsafe_arena_release_area() {
  // @@protoc_insertion_point(field_release:DrawElementProto.area)
  
  ::AreaRuleProto* temp = _impl_.area_;
  _impl_.area_ = nullptr;
  return temp;
}
inline ::AreaRuleProto* DrawElementProto::_internal_mutable_area() {
  
  if (_impl_.area_ == nullptr) {
    auto* p = CreateMaybeMessage<::AreaRuleProto>(GetArenaForAllocation());
    _impl_.area_ = p;
  }
  return _impl_.area_;
}
inline ::AreaRuleProto* DrawElementProto::mutable_area() {
  ::AreaRuleProto* _msg = _internal_mutable_area();
  // @@protoc_insertion_point(field_mutable:DrawElementProto.area)
  return _msg;
}
inline void DrawElementProto::set_allocated_area(::AreaRuleProto* area) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.area_;
  }
  if (area) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(area);
    if (message_arena != submessage_arena) {
      area = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, area, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.area_ = area;
  // @@protoc_insertion_point(field_set_allocated:DrawElementProto.area)
}

// .SymbolRuleProto symbol = 4;
inline bool DrawElementProto::_internal_has_symbol() const {
  return this != internal_default_instance() && _impl_.symbol_ != nullptr;
}
inline bool DrawElementProto::has_symbol() const {
  return _internal_has_symbol();
}
inline void DrawElementProto::clear_symbol() {
  if (GetArenaForAllocation() == nullptr && _impl_.symbol_ != nullptr) {
    delete _impl_.symbol_;
  }
  _impl_.symbol_ = nullptr;
}
inline const ::SymbolRuleProto& DrawElementProto::_internal_symbol() const {
  const ::SymbolRuleProto* p = _impl_.symbol_;
  return p != nullptr ? *p : reinterpret_cast<const ::SymbolRuleProto&>(
      ::_SymbolRuleProto_default_instance_);
}
inline const ::SymbolRuleProto& DrawElementProto::symbol() const {
  // @@protoc_insertion_point(field_get:DrawElementProto.symbol)
  return _internal_symbol();
}
inline void DrawElementProto::unsafe_arena_set_allocated_symbol(
    ::SymbolRuleProto* symbol) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.symbol_);
  }
  _impl_.symbol_ = symbol;
  if (symbol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DrawElementProto.symbol)
}
inline ::SymbolRuleProto* DrawElementProto::release_symbol() {
  
  ::SymbolRuleProto* temp = _impl_.symbol_;
  _impl_.symbol_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SymbolRuleProto* DrawElementProto::unsafe_arena_release_symbol() {
  // @@protoc_insertion_point(field_release:DrawElementProto.symbol)
  
  ::SymbolRuleProto* temp = _impl_.symbol_;
  _impl_.symbol_ = nullptr;
  return temp;
}
inline ::SymbolRuleProto* DrawElementProto::_internal_mutable_symbol() {
  
  if (_impl_.symbol_ == nullptr) {
    auto* p = CreateMaybeMessage<::SymbolRuleProto>(GetArenaForAllocation());
    _impl_.symbol_ = p;
  }
  return _impl_.symbol_;
}
inline ::SymbolRuleProto* DrawElementProto::mutable_symbol() {
  ::SymbolRuleProto* _msg = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:DrawElementProto.symbol)
  return _msg;
}
inline void DrawElementProto::set_allocated_symbol(::SymbolRuleProto* symbol) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.symbol_;
  }
  if (symbol) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(symbol);
    if (message_arena != submessage_arena) {
      symbol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, symbol, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.symbol_ = symbol;
  // @@protoc_insertion_point(field_set_allocated:DrawElementProto.symbol)
}

// .CaptionRuleProto caption = 5;
inline bool DrawElementProto::_internal_has_caption() const {
  return this != internal_default_instance() && _impl_.caption_ != nullptr;
}
inline bool DrawElementProto::has_caption() const {
  return _internal_has_caption();
}
inline void DrawElementProto::clear_caption() {
  if (GetArenaForAllocation() == nullptr && _impl_.caption_ != nullptr) {
    delete _impl_.caption_;
  }
  _impl_.caption_ = nullptr;
}
inline const ::CaptionRuleProto& DrawElementProto::_internal_caption() const {
  const ::CaptionRuleProto* p = _impl_.caption_;
  return p != nullptr ? *p : reinterpret_cast<const ::CaptionRuleProto&>(
      ::_CaptionRuleProto_default_instance_);
}
inline const ::CaptionRuleProto& DrawElementProto::caption() const {
  // @@protoc_insertion_point(field_get:DrawElementProto.caption)
  return _internal_caption();
}
inline void DrawElementProto::unsafe_arena_set_allocated_caption(
    ::CaptionRuleProto* caption) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.caption_);
  }
  _impl_.caption_ = caption;
  if (caption) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DrawElementProto.caption)
}
inline ::CaptionRuleProto* DrawElementProto::release_caption() {
  
  ::CaptionRuleProto* temp = _impl_.caption_;
  _impl_.caption_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CaptionRuleProto* DrawElementProto::unsafe_arena_release_caption() {
  // @@protoc_insertion_point(field_release:DrawElementProto.caption)
  
  ::CaptionRuleProto* temp = _impl_.caption_;
  _impl_.caption_ = nullptr;
  return temp;
}
inline ::CaptionRuleProto* DrawElementProto::_internal_mutable_caption() {
  
  if (_impl_.caption_ == nullptr) {
    auto* p = CreateMaybeMessage<::CaptionRuleProto>(GetArenaForAllocation());
    _impl_.caption_ = p;
  }
  return _impl_.caption_;
}
inline ::CaptionRuleProto* DrawElementProto::mutable_caption() {
  ::CaptionRuleProto* _msg = _internal_mutable_caption();
  // @@protoc_insertion_point(field_mutable:DrawElementProto.caption)
  return _msg;
}
inline void DrawElementProto::set_allocated_caption(::CaptionRuleProto* caption) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.caption_;
  }
  if (caption) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(caption);
    if (message_arena != submessage_arena) {
      caption = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, caption, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.caption_ = caption;
  // @@protoc_insertion_point(field_set_allocated:DrawElementProto.caption)
}

// .CircleRuleProto circle = 6;
inline bool DrawElementProto::_internal_has_circle() const {
  return this != internal_default_instance() && _impl_.circle_ != nullptr;
}
inline bool DrawElementProto::has_circle() const {
  return _internal_has_circle();
}
inline void DrawElementProto::clear_circle() {
  if (GetArenaForAllocation() == nullptr && _impl_.circle_ != nullptr) {
    delete _impl_.circle_;
  }
  _impl_.circle_ = nullptr;
}
inline const ::CircleRuleProto& DrawElementProto::_internal_circle() const {
  const ::CircleRuleProto* p = _impl_.circle_;
  return p != nullptr ? *p : reinterpret_cast<const ::CircleRuleProto&>(
      ::_CircleRuleProto_default_instance_);
}
inline const ::CircleRuleProto& DrawElementProto::circle() const {
  // @@protoc_insertion_point(field_get:DrawElementProto.circle)
  return _internal_circle();
}
inline void DrawElementProto::unsafe_arena_set_allocated_circle(
    ::CircleRuleProto* circle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.circle_);
  }
  _impl_.circle_ = circle;
  if (circle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DrawElementProto.circle)
}
inline ::CircleRuleProto* DrawElementProto::release_circle() {
  
  ::CircleRuleProto* temp = _impl_.circle_;
  _impl_.circle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CircleRuleProto* DrawElementProto::unsafe_arena_release_circle() {
  // @@protoc_insertion_point(field_release:DrawElementProto.circle)
  
  ::CircleRuleProto* temp = _impl_.circle_;
  _impl_.circle_ = nullptr;
  return temp;
}
inline ::CircleRuleProto* DrawElementProto::_internal_mutable_circle() {
  
  if (_impl_.circle_ == nullptr) {
    auto* p = CreateMaybeMessage<::CircleRuleProto>(GetArenaForAllocation());
    _impl_.circle_ = p;
  }
  return _impl_.circle_;
}
inline ::CircleRuleProto* DrawElementProto::mutable_circle() {
  ::CircleRuleProto* _msg = _internal_mutable_circle();
  // @@protoc_insertion_point(field_mutable:DrawElementProto.circle)
  return _msg;
}
inline void DrawElementProto::set_allocated_circle(::CircleRuleProto* circle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.circle_;
  }
  if (circle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(circle);
    if (message_arena != submessage_arena) {
      circle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, circle, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.circle_ = circle;
  // @@protoc_insertion_point(field_set_allocated:DrawElementProto.circle)
}

// .PathTextRuleProto path_text = 7;
inline bool DrawElementProto::_internal_has_path_text() const {
  return this != internal_default_instance() && _impl_.path_text_ != nullptr;
}
inline bool DrawElementProto::has_path_text() const {
  return _internal_has_path_text();
}
inline void DrawElementProto::clear_path_text() {
  if (GetArenaForAllocation() == nullptr && _impl_.path_text_ != nullptr) {
    delete _impl_.path_text_;
  }
  _impl_.path_text_ = nullptr;
}
inline const ::PathTextRuleProto& DrawElementProto::_internal_path_text() const {
  const ::PathTextRuleProto* p = _impl_.path_text_;
  return p != nullptr ? *p : reinterpret_cast<const ::PathTextRuleProto&>(
      ::_PathTextRuleProto_default_instance_);
}
inline const ::PathTextRuleProto& DrawElementProto::path_text() const {
  // @@protoc_insertion_point(field_get:DrawElementProto.path_text)
  return _internal_path_text();
}
inline void DrawElementProto::unsafe_arena_set_allocated_path_text(
    ::PathTextRuleProto* path_text) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.path_text_);
  }
  _impl_.path_text_ = path_text;
  if (path_text) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DrawElementProto.path_text)
}
inline ::PathTextRuleProto* DrawElementProto::release_path_text() {
  
  ::PathTextRuleProto* temp = _impl_.path_text_;
  _impl_.path_text_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PathTextRuleProto* DrawElementProto::unsafe_arena_release_path_text() {
  // @@protoc_insertion_point(field_release:DrawElementProto.path_text)
  
  ::PathTextRuleProto* temp = _impl_.path_text_;
  _impl_.path_text_ = nullptr;
  return temp;
}
inline ::PathTextRuleProto* DrawElementProto::_internal_mutable_path_text() {
  
  if (_impl_.path_text_ == nullptr) {
    auto* p = CreateMaybeMessage<::PathTextRuleProto>(GetArenaForAllocation());
    _impl_.path_text_ = p;
  }
  return _impl_.path_text_;
}
inline ::PathTextRuleProto* DrawElementProto::mutable_path_text() {
  ::PathTextRuleProto* _msg = _internal_mutable_path_text();
  // @@protoc_insertion_point(field_mutable:DrawElementProto.path_text)
  return _msg;
}
inline void DrawElementProto::set_allocated_path_text(::PathTextRuleProto* path_text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.path_text_;
  }
  if (path_text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(path_text);
    if (message_arena != submessage_arena) {
      path_text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path_text, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.path_text_ = path_text;
  // @@protoc_insertion_point(field_set_allocated:DrawElementProto.path_text)
}

// .ShieldRuleProto shield = 8;
inline bool DrawElementProto::_internal_has_shield() const {
  return this != internal_default_instance() && _impl_.shield_ != nullptr;
}
inline bool DrawElementProto::has_shield() const {
  return _internal_has_shield();
}
inline void DrawElementProto::clear_shield() {
  if (GetArenaForAllocation() == nullptr && _impl_.shield_ != nullptr) {
    delete _impl_.shield_;
  }
  _impl_.shield_ = nullptr;
}
inline const ::ShieldRuleProto& DrawElementProto::_internal_shield() const {
  const ::ShieldRuleProto* p = _impl_.shield_;
  return p != nullptr ? *p : reinterpret_cast<const ::ShieldRuleProto&>(
      ::_ShieldRuleProto_default_instance_);
}
inline const ::ShieldRuleProto& DrawElementProto::shield() const {
  // @@protoc_insertion_point(field_get:DrawElementProto.shield)
  return _internal_shield();
}
inline void DrawElementProto::unsafe_arena_set_allocated_shield(
    ::ShieldRuleProto* shield) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shield_);
  }
  _impl_.shield_ = shield;
  if (shield) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DrawElementProto.shield)
}
inline ::ShieldRuleProto* DrawElementProto::release_shield() {
  
  ::ShieldRuleProto* temp = _impl_.shield_;
  _impl_.shield_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ShieldRuleProto* DrawElementProto::unsafe_arena_release_shield() {
  // @@protoc_insertion_point(field_release:DrawElementProto.shield)
  
  ::ShieldRuleProto* temp = _impl_.shield_;
  _impl_.shield_ = nullptr;
  return temp;
}
inline ::ShieldRuleProto* DrawElementProto::_internal_mutable_shield() {
  
  if (_impl_.shield_ == nullptr) {
    auto* p = CreateMaybeMessage<::ShieldRuleProto>(GetArenaForAllocation());
    _impl_.shield_ = p;
  }
  return _impl_.shield_;
}
inline ::ShieldRuleProto* DrawElementProto::mutable_shield() {
  ::ShieldRuleProto* _msg = _internal_mutable_shield();
  // @@protoc_insertion_point(field_mutable:DrawElementProto.shield)
  return _msg;
}
inline void DrawElementProto::set_allocated_shield(::ShieldRuleProto* shield) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.shield_;
  }
  if (shield) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(shield);
    if (message_arena != submessage_arena) {
      shield = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shield, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.shield_ = shield;
  // @@protoc_insertion_point(field_set_allocated:DrawElementProto.shield)
}

// repeated string apply_if = 9;
inline int DrawElementProto::_internal_apply_if_size() const {
  return _impl_.apply_if_.size();
}
inline int DrawElementProto::apply_if_size() const {
  return _internal_apply_if_size();
}
inline void DrawElementProto::clear_apply_if() {
  _impl_.apply_if_.Clear();
}
inline std::string* DrawElementProto::add_apply_if() {
  std::string* _s = _internal_add_apply_if();
  // @@protoc_insertion_point(field_add_mutable:DrawElementProto.apply_if)
  return _s;
}
inline const std::string& DrawElementProto::_internal_apply_if(int index) const {
  return _impl_.apply_if_.Get(index);
}
inline const std::string& DrawElementProto::apply_if(int index) const {
  // @@protoc_insertion_point(field_get:DrawElementProto.apply_if)
  return _internal_apply_if(index);
}
inline std::string* DrawElementProto::mutable_apply_if(int index) {
  // @@protoc_insertion_point(field_mutable:DrawElementProto.apply_if)
  return _impl_.apply_if_.Mutable(index);
}
inline void DrawElementProto::set_apply_if(int index, const std::string& value) {
  _impl_.apply_if_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:DrawElementProto.apply_if)
}
inline void DrawElementProto::set_apply_if(int index, std::string&& value) {
  _impl_.apply_if_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:DrawElementProto.apply_if)
}
inline void DrawElementProto::set_apply_if(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.apply_if_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DrawElementProto.apply_if)
}
inline void DrawElementProto::set_apply_if(int index, const char* value, size_t size) {
  _impl_.apply_if_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DrawElementProto.apply_if)
}
inline std::string* DrawElementProto::_internal_add_apply_if() {
  return _impl_.apply_if_.Add();
}
inline void DrawElementProto::add_apply_if(const std::string& value) {
  _impl_.apply_if_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DrawElementProto.apply_if)
}
inline void DrawElementProto::add_apply_if(std::string&& value) {
  _impl_.apply_if_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:DrawElementProto.apply_if)
}
inline void DrawElementProto::add_apply_if(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.apply_if_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DrawElementProto.apply_if)
}
inline void DrawElementProto::add_apply_if(const char* value, size_t size) {
  _impl_.apply_if_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DrawElementProto.apply_if)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DrawElementProto::apply_if() const {
  // @@protoc_insertion_point(field_list:DrawElementProto.apply_if)
  return _impl_.apply_if_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DrawElementProto::mutable_apply_if() {
  // @@protoc_insertion_point(field_mutable_list:DrawElementProto.apply_if)
  return &_impl_.apply_if_;
}

// -------------------------------------------------------------------

// ClassifElementProto

// string name = 1;
inline void ClassifElementProto::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ClassifElementProto::name() const {
  // @@protoc_insertion_point(field_get:ClassifElementProto.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClassifElementProto::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ClassifElementProto.name)
}
inline std::string* ClassifElementProto::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ClassifElementProto.name)
  return _s;
}
inline const std::string& ClassifElementProto::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ClassifElementProto::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ClassifElementProto::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ClassifElementProto::release_name() {
  // @@protoc_insertion_point(field_release:ClassifElementProto.name)
  return _impl_.name_.Release();
}
inline void ClassifElementProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ClassifElementProto.name)
}

// repeated .DrawElementProto element = 2;
inline int ClassifElementProto::_internal_element_size() const {
  return _impl_.element_.size();
}
inline int ClassifElementProto::element_size() const {
  return _internal_element_size();
}
inline void ClassifElementProto::clear_element() {
  _impl_.element_.Clear();
}
inline ::DrawElementProto* ClassifElementProto::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:ClassifElementProto.element)
  return _impl_.element_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DrawElementProto >*
ClassifElementProto::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:ClassifElementProto.element)
  return &_impl_.element_;
}
inline const ::DrawElementProto& ClassifElementProto::_internal_element(int index) const {
  return _impl_.element_.Get(index);
}
inline const ::DrawElementProto& ClassifElementProto::element(int index) const {
  // @@protoc_insertion_point(field_get:ClassifElementProto.element)
  return _internal_element(index);
}
inline ::DrawElementProto* ClassifElementProto::_internal_add_element() {
  return _impl_.element_.Add();
}
inline ::DrawElementProto* ClassifElementProto::add_element() {
  ::DrawElementProto* _add = _internal_add_element();
  // @@protoc_insertion_point(field_add:ClassifElementProto.element)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DrawElementProto >&
ClassifElementProto::element() const {
  // @@protoc_insertion_point(field_list:ClassifElementProto.element)
  return _impl_.element_;
}

// -------------------------------------------------------------------

// ColorElementProto

// string name = 1;
inline void ColorElementProto::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ColorElementProto::name() const {
  // @@protoc_insertion_point(field_get:ColorElementProto.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ColorElementProto::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ColorElementProto.name)
}
inline std::string* ColorElementProto::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ColorElementProto.name)
  return _s;
}
inline const std::string& ColorElementProto::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ColorElementProto::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ColorElementProto::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ColorElementProto::release_name() {
  // @@protoc_insertion_point(field_release:ColorElementProto.name)
  return _impl_.name_.Release();
}
inline void ColorElementProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ColorElementProto.name)
}

// uint32 color = 2;
inline void ColorElementProto::clear_color() {
  _impl_.color_ = 0u;
}
inline uint32_t ColorElementProto::_internal_color() const {
  return _impl_.color_;
}
inline uint32_t ColorElementProto::color() const {
  // @@protoc_insertion_point(field_get:ColorElementProto.color)
  return _internal_color();
}
inline void ColorElementProto::_internal_set_color(uint32_t value) {
  
  _impl_.color_ = value;
}
inline void ColorElementProto::set_color(uint32_t value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:ColorElementProto.color)
}

// float x = 3;
inline void ColorElementProto::clear_x() {
  _impl_.x_ = 0;
}
inline float ColorElementProto::_internal_x() const {
  return _impl_.x_;
}
inline float ColorElementProto::x() const {
  // @@protoc_insertion_point(field_get:ColorElementProto.x)
  return _internal_x();
}
inline void ColorElementProto::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void ColorElementProto::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ColorElementProto.x)
}

// float y = 4;
inline void ColorElementProto::clear_y() {
  _impl_.y_ = 0;
}
inline float ColorElementProto::_internal_y() const {
  return _impl_.y_;
}
inline float ColorElementProto::y() const {
  // @@protoc_insertion_point(field_get:ColorElementProto.y)
  return _internal_y();
}
inline void ColorElementProto::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void ColorElementProto::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ColorElementProto.y)
}

// -------------------------------------------------------------------

// ColorsElementProto

// repeated .ColorElementProto value = 1;
inline int ColorsElementProto::_internal_value_size() const {
  return _impl_.value_.size();
}
inline int ColorsElementProto::value_size() const {
  return _internal_value_size();
}
inline void ColorsElementProto::clear_value() {
  _impl_.value_.Clear();
}
inline ::ColorElementProto* ColorsElementProto::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:ColorsElementProto.value)
  return _impl_.value_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ColorElementProto >*
ColorsElementProto::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:ColorsElementProto.value)
  return &_impl_.value_;
}
inline const ::ColorElementProto& ColorsElementProto::_internal_value(int index) const {
  return _impl_.value_.Get(index);
}
inline const ::ColorElementProto& ColorsElementProto::value(int index) const {
  // @@protoc_insertion_point(field_get:ColorsElementProto.value)
  return _internal_value(index);
}
inline ::ColorElementProto* ColorsElementProto::_internal_add_value() {
  return _impl_.value_.Add();
}
inline ::ColorElementProto* ColorsElementProto::add_value() {
  ::ColorElementProto* _add = _internal_add_value();
  // @@protoc_insertion_point(field_add:ColorsElementProto.value)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ColorElementProto >&
ColorsElementProto::value() const {
  // @@protoc_insertion_point(field_list:ColorsElementProto.value)
  return _impl_.value_;
}

// -------------------------------------------------------------------

// ContainerProto

// repeated .ClassifElementProto cont = 1;
inline int ContainerProto::_internal_cont_size() const {
  return _impl_.cont_.size();
}
inline int ContainerProto::cont_size() const {
  return _internal_cont_size();
}
inline void ContainerProto::clear_cont() {
  _impl_.cont_.Clear();
}
inline ::ClassifElementProto* ContainerProto::mutable_cont(int index) {
  // @@protoc_insertion_point(field_mutable:ContainerProto.cont)
  return _impl_.cont_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClassifElementProto >*
ContainerProto::mutable_cont() {
  // @@protoc_insertion_point(field_mutable_list:ContainerProto.cont)
  return &_impl_.cont_;
}
inline const ::ClassifElementProto& ContainerProto::_internal_cont(int index) const {
  return _impl_.cont_.Get(index);
}
inline const ::ClassifElementProto& ContainerProto::cont(int index) const {
  // @@protoc_insertion_point(field_get:ContainerProto.cont)
  return _internal_cont(index);
}
inline ::ClassifElementProto* ContainerProto::_internal_add_cont() {
  return _impl_.cont_.Add();
}
inline ::ClassifElementProto* ContainerProto::add_cont() {
  ::ClassifElementProto* _add = _internal_add_cont();
  // @@protoc_insertion_point(field_add:ContainerProto.cont)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClassifElementProto >&
ContainerProto::cont() const {
  // @@protoc_insertion_point(field_list:ContainerProto.cont)
  return _impl_.cont_;
}

// .ColorsElementProto colors = 2;
inline bool ContainerProto::_internal_has_colors() const {
  return this != internal_default_instance() && _impl_.colors_ != nullptr;
}
inline bool ContainerProto::has_colors() const {
  return _internal_has_colors();
}
inline void ContainerProto::clear_colors() {
  if (GetArenaForAllocation() == nullptr && _impl_.colors_ != nullptr) {
    delete _impl_.colors_;
  }
  _impl_.colors_ = nullptr;
}
inline const ::ColorsElementProto& ContainerProto::_internal_colors() const {
  const ::ColorsElementProto* p = _impl_.colors_;
  return p != nullptr ? *p : reinterpret_cast<const ::ColorsElementProto&>(
      ::_ColorsElementProto_default_instance_);
}
inline const ::ColorsElementProto& ContainerProto::colors() const {
  // @@protoc_insertion_point(field_get:ContainerProto.colors)
  return _internal_colors();
}
inline void ContainerProto::unsafe_arena_set_allocated_colors(
    ::ColorsElementProto* colors) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.colors_);
  }
  _impl_.colors_ = colors;
  if (colors) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ContainerProto.colors)
}
inline ::ColorsElementProto* ContainerProto::release_colors() {
  
  ::ColorsElementProto* temp = _impl_.colors_;
  _impl_.colors_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ColorsElementProto* ContainerProto::unsafe_arena_release_colors() {
  // @@protoc_insertion_point(field_release:ContainerProto.colors)
  
  ::ColorsElementProto* temp = _impl_.colors_;
  _impl_.colors_ = nullptr;
  return temp;
}
inline ::ColorsElementProto* ContainerProto::_internal_mutable_colors() {
  
  if (_impl_.colors_ == nullptr) {
    auto* p = CreateMaybeMessage<::ColorsElementProto>(GetArenaForAllocation());
    _impl_.colors_ = p;
  }
  return _impl_.colors_;
}
inline ::ColorsElementProto* ContainerProto::mutable_colors() {
  ::ColorsElementProto* _msg = _internal_mutable_colors();
  // @@protoc_insertion_point(field_mutable:ContainerProto.colors)
  return _msg;
}
inline void ContainerProto::set_allocated_colors(::ColorsElementProto* colors) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.colors_;
  }
  if (colors) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(colors);
    if (message_arena != submessage_arena) {
      colors = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, colors, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.colors_ = colors;
  // @@protoc_insertion_point(field_set_allocated:ContainerProto.colors)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::LineJoin> : ::std::true_type {};
template <> struct is_proto_enum< ::LineCap> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_drules_5fstruct_2eproto
